// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   react
//   moment
//   @ant-design/react-slick
//   rc-field-form/lib/interface
//   rc-image
//   rc-input-number
//   rc-notification/lib/Notification
//   rc-menu
//   rc-mentions/lib/Mentions
//   rc-select
//   rc-select/lib/Option
//   rc-tree/lib/interface
//   rc-tree-select
//   rc-tree-select/lib/interface
//   rc-tabs
//   rc-tooltip/lib/Tooltip
//   rc-tooltip/lib/placements
//   rc-picker/lib/generate
//   rc-picker/lib/PickerPanel
//   rc-field-form
//   rc-field-form/lib/Form
//   scroll-into-view-if-needed
//   rc-picker/lib/generate/index
//   rc-picker/lib/Picker
//   rc-picker/lib/panels/TimePanel
//   rc-picker/lib/RangePicker
//   rc-picker/lib/interface
//   rc-field-form/lib/Field
//   rc-field-form/lib/FormContext
//   rc-textarea
//   rc-textarea/lib/ResizableTextArea
//   rc-image/lib/PreviewGroup
//   rc-table/lib/Table
//   rc-table/lib/interface
//   rc-tree
//   rc-trigger
//   rc-upload/lib/interface

declare module 'antd' {
    export type { AffixProps } from 'antd/node_modules/antd/lib/affix';
    export { default as Affix } from 'antd/node_modules/antd/lib/affix';
    export type { AnchorProps, AnchorLinkProps } from 'antd/node_modules/antd/lib/anchor';
    export { default as Anchor } from 'antd/node_modules/antd/lib/anchor';
    export type { AutoCompleteProps } from 'antd/node_modules/antd/lib/auto-complete';
    export { default as AutoComplete } from 'antd/node_modules/antd/lib/auto-complete';
    export type { AlertProps } from 'antd/node_modules/antd/lib/alert';
    export { default as Alert } from 'antd/node_modules/antd/lib/alert';
    export type { AvatarProps } from 'antd/node_modules/antd/lib/avatar';
    export { default as Avatar } from 'antd/node_modules/antd/lib/avatar';
    export type { BackTopProps } from 'antd/node_modules/antd/lib/back-top';
    export { default as BackTop } from 'antd/node_modules/antd/lib/back-top';
    export type { BadgeProps } from 'antd/node_modules/antd/lib/badge';
    export { default as Badge } from 'antd/node_modules/antd/lib/badge';
    export type { BreadcrumbProps, BreadcrumbItemProps } from 'antd/node_modules/antd/lib/breadcrumb';
    export { default as Breadcrumb } from 'antd/node_modules/antd/lib/breadcrumb';
    export type { ButtonProps } from 'antd/node_modules/antd/lib/button';
    export { default as Button } from 'antd/node_modules/antd/lib/button';
    export type { CalendarProps } from 'antd/node_modules/antd/lib/calendar';
    export { default as Calendar } from 'antd/node_modules/antd/lib/calendar';
    export type { CardProps } from 'antd/node_modules/antd/lib/card';
    export { default as Card } from 'antd/node_modules/antd/lib/card';
    export type { CollapseProps, CollapsePanelProps } from 'antd/node_modules/antd/lib/collapse';
    export { default as Collapse } from 'antd/node_modules/antd/lib/collapse';
    export type { CarouselProps } from 'antd/node_modules/antd/lib/carousel';
    export { default as Carousel } from 'antd/node_modules/antd/lib/carousel';
    export type { CascaderProps } from 'antd/node_modules/antd/lib/cascader';
    export { default as Cascader } from 'antd/node_modules/antd/lib/cascader';
    export type { CheckboxProps, CheckboxOptionType } from 'antd/node_modules/antd/lib/checkbox';
    export { default as Checkbox } from 'antd/node_modules/antd/lib/checkbox';
    export type { ColProps } from 'antd/node_modules/antd/lib/col';
    export { default as Col } from 'antd/node_modules/antd/lib/col';
    export type { CommentProps } from 'antd/node_modules/antd/lib/comment';
    export { default as Comment } from 'antd/node_modules/antd/lib/comment';
    export { default as ConfigProvider } from 'antd/node_modules/antd/lib/config-provider';
    export type { DatePickerProps } from 'antd/node_modules/antd/lib/date-picker';
    export { default as DatePicker } from 'antd/node_modules/antd/lib/date-picker';
    export type { DescriptionsProps } from 'antd/node_modules/antd/lib/descriptions';
    export { default as Descriptions } from 'antd/node_modules/antd/lib/descriptions';
    export type { DividerProps } from 'antd/node_modules/antd/lib/divider';
    export { default as Divider } from 'antd/node_modules/antd/lib/divider';
    export type { DropDownProps } from 'antd/node_modules/antd/lib/dropdown';
    export { default as Dropdown } from 'antd/node_modules/antd/lib/dropdown';
    export type { DrawerProps } from 'antd/node_modules/antd/lib/drawer';
    export { default as Drawer } from 'antd/node_modules/antd/lib/drawer';
    export type { EmptyProps } from 'antd/node_modules/antd/lib/empty';
    export { default as Empty } from 'antd/node_modules/antd/lib/empty';
    export type { FormInstance, FormProps, FormItemProps } from 'antd/node_modules/antd/lib/form';
    export { default as Form } from 'antd/node_modules/antd/lib/form';
    export { default as Grid } from 'antd/node_modules/antd/lib/grid';
    export type { InputProps } from 'antd/node_modules/antd/lib/input';
    export { default as Input } from 'antd/node_modules/antd/lib/input';
    export type { ImageProps } from 'antd/node_modules/antd/lib/image';
    export { default as Image } from 'antd/node_modules/antd/lib/image';
    export type { InputNumberProps } from 'antd/node_modules/antd/lib/input-number';
    export { default as InputNumber } from 'antd/node_modules/antd/lib/input-number';
    export type { LayoutProps } from 'antd/node_modules/antd/lib/layout';
    export { default as Layout } from 'antd/node_modules/antd/lib/layout';
    export type { ListProps } from 'antd/node_modules/antd/lib/list';
    export { default as List } from 'antd/node_modules/antd/lib/list';
    export type { ArgsProps as MessageArgsProps } from 'antd/node_modules/antd/lib/message';
    export { default as message } from 'antd/node_modules/antd/lib/message';
    export type { MenuProps, MenuTheme, SubMenuProps, MenuItemProps } from 'antd/node_modules/antd/lib/menu';
    export { default as Menu } from 'antd/node_modules/antd/lib/menu';
    export type { MentionProps } from 'antd/node_modules/antd/lib/mentions';
    export { default as Mentions } from 'antd/node_modules/antd/lib/mentions';
    export type { ModalProps, ModalFuncProps } from 'antd/node_modules/antd/lib/modal';
    export { default as Modal } from 'antd/node_modules/antd/lib/modal';
    export type { StatisticProps } from 'antd/node_modules/antd/lib/statistic';
    export { default as Statistic } from 'antd/node_modules/antd/lib/statistic';
    export { default as notification } from 'antd/node_modules/antd/lib/notification';
    export type { PageHeaderProps } from 'antd/node_modules/antd/lib/page-header';
    export { default as PageHeader } from 'antd/node_modules/antd/lib/page-header';
    export type { PaginationProps } from 'antd/node_modules/antd/lib/pagination';
    export { default as Pagination } from 'antd/node_modules/antd/lib/pagination';
    export type { PopconfirmProps } from 'antd/node_modules/antd/lib/popconfirm';
    export { default as Popconfirm } from 'antd/node_modules/antd/lib/popconfirm';
    export type { PopoverProps } from 'antd/node_modules/antd/lib/popover';
    export { default as Popover } from 'antd/node_modules/antd/lib/popover';
    export type { ProgressProps } from 'antd/node_modules/antd/lib/progress';
    export { default as Progress } from 'antd/node_modules/antd/lib/progress';
    export type { RadioProps, RadioChangeEvent, RadioGroupProps } from 'antd/node_modules/antd/lib/radio';
    export { default as Radio } from 'antd/node_modules/antd/lib/radio';
    export type { RateProps } from 'antd/node_modules/antd/lib/rate';
    export { default as Rate } from 'antd/node_modules/antd/lib/rate';
    export type { ResultProps } from 'antd/node_modules/antd/lib/result';
    export { default as Result } from 'antd/node_modules/antd/lib/result';
    export type { RowProps } from 'antd/node_modules/antd/lib/row';
    export { default as Row } from 'antd/node_modules/antd/lib/row';
    export type { SelectProps } from 'antd/node_modules/antd/lib/select';
    export { default as Select } from 'antd/node_modules/antd/lib/select';
    export type { SkeletonProps } from 'antd/node_modules/antd/lib/skeleton';
    export { default as Skeleton } from 'antd/node_modules/antd/lib/skeleton';
    export type { SliderSingleProps } from 'antd/node_modules/antd/lib/slider';
    export { default as Slider } from 'antd/node_modules/antd/lib/slider';
    export type { SpaceProps } from 'antd/node_modules/antd/lib/space';
    export { default as Space } from 'antd/node_modules/antd/lib/space';
    export type { SpinProps } from 'antd/node_modules/antd/lib/spin';
    export { default as Spin } from 'antd/node_modules/antd/lib/spin';
    export type { StepProps, StepsProps } from 'antd/node_modules/antd/lib/steps';
    export { default as Steps } from 'antd/node_modules/antd/lib/steps';
    export type { SwitchProps } from 'antd/node_modules/antd/lib/switch';
    export { default as Switch } from 'antd/node_modules/antd/lib/switch';
    export type { TableProps, TablePaginationConfig, ColumnGroupType as TableColumnGroupType, ColumnType as TableColumnType, ColumnProps as TableColumnProps, ColumnsType as TableColumnsType, } from 'antd/node_modules/antd/lib/table';
    export { default as Table } from 'antd/node_modules/antd/lib/table';
    export type { TransferProps } from 'antd/node_modules/antd/lib/transfer';
    export { default as Transfer } from 'antd/node_modules/antd/lib/transfer';
    export type { TreeProps, AntTreeNodeProps as TreeNodeProps, DataNode as TreeDataNode, } from 'antd/node_modules/antd/lib/tree';
    export { default as Tree } from 'antd/node_modules/antd/lib/tree';
    export type { TreeSelectProps } from 'antd/node_modules/antd/lib/tree-select';
    export { default as TreeSelect } from 'antd/node_modules/antd/lib/tree-select';
    export type { TabsProps, TabPaneProps } from 'antd/node_modules/antd/lib/tabs';
    export { default as Tabs } from 'antd/node_modules/antd/lib/tabs';
    export type { TagProps, TagType } from 'antd/node_modules/antd/lib/tag';
    export { default as Tag } from 'antd/node_modules/antd/lib/tag';
    export type { TimePickerProps, TimeRangePickerProps } from 'antd/node_modules/antd/lib/time-picker';
    export { default as TimePicker } from 'antd/node_modules/antd/lib/time-picker';
    export type { TimelineProps, TimelineItemProps } from 'antd/node_modules/antd/lib/timeline';
    export { default as Timeline } from 'antd/node_modules/antd/lib/timeline';
    export type { TooltipProps } from 'antd/node_modules/antd/lib/tooltip';
    export { default as Tooltip } from 'antd/node_modules/antd/lib/tooltip';
    export type { TypographyProps } from 'antd/node_modules/antd/lib/typography';
    export { default as Typography } from 'antd/node_modules/antd/lib/typography';
    export type { UploadProps } from 'antd/node_modules/antd/lib/upload';
    export { default as Upload } from 'antd/node_modules/antd/lib/upload';
    export { default as version } from 'antd/node_modules/antd/lib/version';
}

declare module 'antd/node_modules/antd/lib/affix' {
    import * as React from 'react';
    import { ConfigConsumerProps } from 'antd/node_modules/antd/lib/config-provider';
    export interface AffixProps {
        /** 距离窗口顶部达到指定偏移量后触发 */
        offsetTop?: number;
        /** 距离窗口底部达到指定偏移量后触发 */
        offsetBottom?: number;
        style?: React.CSSProperties;
        /** 固定状态改变时触发的回调函数 */
        onChange?: (affixed?: boolean) => void;
        /** 设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 */
        target?: () => Window | HTMLElement | null;
        prefixCls?: string;
        className?: string;
        children: React.ReactNode;
    }
    enum AffixStatus {
        None = 0,
        Prepare = 1
    }
    export interface AffixState {
        affixStyle?: React.CSSProperties;
        placeholderStyle?: React.CSSProperties;
        status: AffixStatus;
        lastAffix: boolean;
        prevTarget: Window | HTMLElement | null;
    }
    class Affix extends React.Component<AffixProps, AffixState> {
        static contextType: React.Context<ConfigConsumerProps>;
        state: AffixState;
        placeholderNode: HTMLDivElement;
        fixedNode: HTMLDivElement;
        context: ConfigConsumerProps;
        componentDidMount(): void;
        componentDidUpdate(prevProps: AffixProps): void;
        componentWillUnmount(): void;
        getOffsetTop: () => number | undefined;
        getOffsetBottom: () => number | undefined;
        savePlaceholderNode: (node: HTMLDivElement) => void;
        saveFixedNode: (node: HTMLDivElement) => void;
        measure: () => void;
        prepareMeasure: () => void;
        updatePosition(): void;
        lazyUpdatePosition(): void;
        render: () => JSX.Element;
    }
    export default Affix;
}

declare module 'antd/node_modules/antd/lib/anchor' {
    import Anchor from 'antd/node_modules/antd/lib/anchor/Anchor';
    export { AnchorProps } from 'antd/node_modules/antd/lib/anchor/Anchor';
    export { AnchorLinkProps } from 'antd/node_modules/antd/lib/anchor/AnchorLink';
    export default Anchor;
}

declare module 'antd/node_modules/antd/lib/auto-complete' {
    /**
      * TODO: 4.0
      *
      * - Remove `dataSource`
      * - `size` not work with customizeInput
      * - CustomizeInput not feedback `ENTER` key since accessibility enhancement
      */
    import * as React from 'react';
    import { InternalSelectProps, OptionType, RefSelectProps } from 'antd/node_modules/antd/lib/select';
    export interface DataSourceItemObject {
        value: string;
        text: string;
    }
    export type DataSourceItemType = DataSourceItemObject | React.ReactNode;
    export interface AutoCompleteProps extends Omit<InternalSelectProps<string>, 'inputIcon' | 'loading' | 'mode' | 'optionLabelProp' | 'labelInValue'> {
        dataSource?: DataSourceItemType[];
    }
    const RefAutoComplete: React.ForwardRefExoticComponent<AutoCompleteProps & React.RefAttributes<RefSelectProps>>;
    type RefAutoCompleteWithOption = typeof RefAutoComplete & {
        Option: OptionType;
    };
    const _default: RefAutoCompleteWithOption;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/alert' {
    import * as React from 'react';
    import ErrorBoundary from 'antd/node_modules/antd/lib/alert/ErrorBoundary';
    export interface AlertProps {
        /** Type of Alert styles, options:`success`, `info`, `warning`, `error` */
        type?: 'success' | 'info' | 'warning' | 'error';
        /** Whether Alert can be closed */
        closable?: boolean;
        /** Close text to show */
        closeText?: React.ReactNode;
        /** Content of Alert */
        message: React.ReactNode;
        /** Additional content of Alert */
        description?: React.ReactNode;
        /** Callback when close Alert */
        onClose?: React.MouseEventHandler<HTMLButtonElement>;
        /** Trigger when animation ending of Alert */
        afterClose?: () => void;
        /** Whether to show icon */
        showIcon?: boolean;
        /** https://www.w3.org/TR/2014/REC-html5-20141028/dom.html#aria-role-attribute */
        role?: string;
        style?: React.CSSProperties;
        prefixCls?: string;
        className?: string;
        banner?: boolean;
        icon?: React.ReactNode;
        action?: React.ReactNode;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;
        onClick?: React.MouseEventHandler<HTMLDivElement>;
    }
    interface AlertInterface extends React.FC<AlertProps> {
        ErrorBoundary: typeof ErrorBoundary;
    }
    const Alert: AlertInterface;
    export default Alert;
}

declare module 'antd/node_modules/antd/lib/avatar' {
    import * as React from 'react';
    import { AvatarProps } from 'antd/node_modules/antd/lib/avatar/avatar';
    import Group from 'antd/node_modules/antd/lib/avatar/group';
    export { AvatarProps } from 'antd/node_modules/antd/lib/avatar/avatar';
    export { GroupProps } from 'antd/node_modules/antd/lib/avatar/group';
    interface CompoundedComponent extends React.ForwardRefExoticComponent<AvatarProps & React.RefAttributes<HTMLElement>> {
        Group: typeof Group;
    }
    const Avatar: CompoundedComponent;
    export { Group };
    export default Avatar;
}

declare module 'antd/node_modules/antd/lib/back-top' {
    import * as React from 'react';
    export interface BackTopProps {
        visibilityHeight?: number;
        onClick?: React.MouseEventHandler<HTMLElement>;
        target?: () => HTMLElement | Window | Document;
        prefixCls?: string;
        children?: React.ReactNode;
        className?: string;
        style?: React.CSSProperties;
        duration?: number;
        visible?: boolean;
    }
    const _default: React.NamedExoticComponent<BackTopProps>;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/badge' {
    import * as React from 'react';
    import Ribbon from 'antd/node_modules/antd/lib/badge/Ribbon';
    import { PresetColorType, PresetStatusColorType } from 'antd/node_modules/antd/lib/_util/colors';
    import { LiteralUnion } from 'antd/node_modules/antd/lib/_util/type';
    export { ScrollNumberProps } from 'antd/node_modules/antd/lib/badge/ScrollNumber';
    interface CompoundedComponent extends React.FC<BadgeProps> {
        Ribbon: typeof Ribbon;
    }
    export interface BadgeProps {
        /** Number to show in badge */
        count?: React.ReactNode;
        showZero?: boolean;
        /** Max count to show */
        overflowCount?: number;
        /** Whether to show red dot without number */
        dot?: boolean;
        style?: React.CSSProperties;
        prefixCls?: string;
        scrollNumberPrefixCls?: string;
        className?: string;
        status?: PresetStatusColorType;
        color?: LiteralUnion<PresetColorType, string>;
        text?: React.ReactNode;
        size?: 'default' | 'small';
        offset?: [number | string, number | string];
        title?: string;
    }
    const Badge: CompoundedComponent;
    export default Badge;
}

declare module 'antd/node_modules/antd/lib/breadcrumb' {
    import Breadcrumb from 'antd/node_modules/antd/lib/breadcrumb/Breadcrumb';
    export { BreadcrumbProps } from 'antd/node_modules/antd/lib/breadcrumb/Breadcrumb';
    export { BreadcrumbItemProps } from 'antd/node_modules/antd/lib/breadcrumb/BreadcrumbItem';
    export default Breadcrumb;
}

declare module 'antd/node_modules/antd/lib/button' {
    import Button from 'antd/node_modules/antd/lib/button/button';
    export { ButtonProps, ButtonShape, ButtonType } from 'antd/node_modules/antd/lib/button/button';
    export { ButtonGroupProps } from 'antd/node_modules/antd/lib/button/button-group';
    export { SizeType as ButtonSize } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export default Button;
}

declare module 'antd/node_modules/antd/lib/calendar' {
    import { Moment } from 'moment';
    import { CalendarProps } from 'antd/node_modules/antd/lib/calendar/generateCalendar';
    const Calendar: (props: CalendarProps<Moment>) => JSX.Element;
    export { CalendarProps };
    export default Calendar;
}

declare module 'antd/node_modules/antd/lib/card' {
    import * as React from 'react';
    import Grid from 'antd/node_modules/antd/lib/card/Grid';
    import Meta from 'antd/node_modules/antd/lib/card/Meta';
    import { TabsProps } from 'antd/node_modules/antd/lib/tabs';
    import { Omit } from 'antd/node_modules/antd/lib/_util/type';
    export { CardGridProps } from 'antd/node_modules/antd/lib/card/Grid';
    export { CardMetaProps } from 'antd/node_modules/antd/lib/card/Meta';
    export type CardType = 'inner';
    export type CardSize = 'default' | 'small';
    export interface CardTabListType {
        key: string;
        tab: React.ReactNode;
        disabled?: boolean;
    }
    export interface CardProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'title'> {
        prefixCls?: string;
        title?: React.ReactNode;
        extra?: React.ReactNode;
        bordered?: boolean;
        headStyle?: React.CSSProperties;
        bodyStyle?: React.CSSProperties;
        style?: React.CSSProperties;
        loading?: boolean;
        hoverable?: boolean;
        children?: React.ReactNode;
        id?: string;
        className?: string;
        size?: CardSize;
        type?: CardType;
        cover?: React.ReactNode;
        actions?: React.ReactNode[];
        tabList?: CardTabListType[];
        tabBarExtraContent?: React.ReactNode | null;
        onTabChange?: (key: string) => void;
        activeTabKey?: string;
        defaultActiveTabKey?: string;
        tabProps?: TabsProps;
    }
    export interface CardInterface extends React.FC<CardProps> {
        Grid: typeof Grid;
        Meta: typeof Meta;
    }
    const Card: CardInterface;
    export default Card;
}

declare module 'antd/node_modules/antd/lib/collapse' {
    import Collapse from 'antd/node_modules/antd/lib/collapse/Collapse';
    export { CollapseProps } from 'antd/node_modules/antd/lib/collapse/Collapse';
    export { CollapsePanelProps } from 'antd/node_modules/antd/lib/collapse/CollapsePanel';
    export default Collapse;
}

declare module 'antd/node_modules/antd/lib/carousel' {
    import * as React from 'react';
    import { Settings } from '@ant-design/react-slick';
    export type CarouselEffect = 'scrollx' | 'fade';
    export type DotPosition = 'top' | 'bottom' | 'left' | 'right';
    export interface CarouselProps extends Omit<Settings, 'dots' | 'dotsClass'> {
        effect?: CarouselEffect;
        style?: React.CSSProperties;
        prefixCls?: string;
        slickGoTo?: number;
        dotPosition?: DotPosition;
        children?: React.ReactNode;
        dots?: boolean | {
            className?: string;
        };
    }
    export interface CarouselRef {
        goTo: (slide: number, dontAnimate?: boolean) => void;
        next: () => void;
        prev: () => void;
        autoPlay: boolean;
        innerSlider: any;
    }
    const Carousel: React.ForwardRefExoticComponent<CarouselProps & React.RefAttributes<CarouselRef>>;
    export default Carousel;
}

declare module 'antd/node_modules/antd/lib/cascader' {
    import * as React from 'react';
    import Input from 'antd/node_modules/antd/lib/input';
    import { ConfigConsumerProps, RenderEmptyHandler, DirectionType } from 'antd/node_modules/antd/lib/config-provider';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export interface CascaderOptionType {
        value?: string | number;
        label?: React.ReactNode;
        disabled?: boolean;
        isLeaf?: boolean;
        loading?: boolean;
        children?: Array<CascaderOptionType>;
        [key: string]: any;
    }
    export interface FieldNamesType {
        value?: string | number;
        label?: string;
        children?: string;
    }
    export interface FilledFieldNamesType {
        value: string | number;
        label: string;
        children: string;
    }
    export type CascaderExpandTrigger = 'click' | 'hover';
    export type CascaderValueType = (string | number)[];
    export interface ShowSearchType {
        filter?: (inputValue: string, path: CascaderOptionType[], names: FilledFieldNamesType) => boolean;
        render?: (inputValue: string, path: CascaderOptionType[], prefixCls: string | undefined, names: FilledFieldNamesType) => React.ReactNode;
        sort?: (a: CascaderOptionType[], b: CascaderOptionType[], inputValue: string, names: FilledFieldNamesType) => number;
        matchInputWidth?: boolean;
        limit?: number | false;
    }
    export interface CascaderProps {
        /** 可选项数据源 */
        options: CascaderOptionType[];
        /** 默认的选中项 */
        defaultValue?: CascaderValueType;
        /** 指定选中项 */
        value?: CascaderValueType;
        /** 选择完成后的回调 */
        onChange?: (value: CascaderValueType, selectedOptions?: CascaderOptionType[]) => void;
        /** 选择后展示的渲染函数 */
        displayRender?: (label: string[], selectedOptions?: CascaderOptionType[]) => React.ReactNode;
        /** 自定义样式 */
        style?: React.CSSProperties;
        /** 自定义类名 */
        className?: string;
        /** 自定义浮层类名 */
        popupClassName?: string;
        /** 浮层预设位置：`bottomLeft` `bottomRight` `topLeft` `topRight` */
        popupPlacement?: string;
        /** 输入框占位文本 */
        placeholder?: string;
        /** 输入框大小，可选 `large` `default` `small` */
        size?: SizeType;
        /** 输入框 name */
        name?: string;
        /** 输入框 id */
        id?: string;
        /** Whether has border style */
        bordered?: boolean;
        /** 禁用 */
        disabled?: boolean;
        /** 是否支持清除 */
        allowClear?: boolean;
        /** 自动获取焦点 */
        autoFocus?: boolean;
        showSearch?: boolean | ShowSearchType;
        notFoundContent?: React.ReactNode;
        loadData?: (selectedOptions?: CascaderOptionType[]) => void;
        /** 次级菜单的展开方式，可选 'click' 和 'hover' */
        expandTrigger?: CascaderExpandTrigger;
        expandIcon?: React.ReactNode;
        /** 当此项为 true 时，点选每级菜单选项值都会发生变化 */
        changeOnSelect?: boolean;
        /** 浮层可见变化时回调 */
        onPopupVisibleChange?: (popupVisible: boolean) => void;
        prefixCls?: string;
        inputPrefixCls?: string;
        getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        popupVisible?: boolean;
        /** Use this after antd@3.7.0 */
        fieldNames?: FieldNamesType;
        suffixIcon?: React.ReactNode;
        dropdownRender?: (menus: React.ReactNode) => React.ReactNode;
        autoComplete?: string;
        transitionName?: string;
        children?: React.ReactElement;
    }
    export interface CascaderState {
        inputFocused: boolean;
        inputValue: string;
        value: CascaderValueType;
        popupVisible: boolean | undefined;
        flattenOptions: CascaderOptionType[][] | undefined;
        prevProps: CascaderProps;
    }
    interface CascaderLocale {
        placeholder?: string;
    }
    class Cascader extends React.Component<CascaderProps, CascaderState> {
        static defaultProps: {
            options: never[];
            disabled: boolean;
            allowClear: boolean;
            bordered: boolean;
        };
        static getDerivedStateFromProps(nextProps: CascaderProps, { prevProps }: CascaderState): Partial<CascaderState>;
        cachedOptions: CascaderOptionType[];
        clearSelectionTimeout: any;
        constructor(props: CascaderProps);
        componentWillUnmount(): void;
        setValue: (value: CascaderValueType, selectedOptions?: CascaderOptionType[]) => void;
        getLabel(): any;
        saveInput: (node: Input) => void;
        handleChange: (value: any, selectedOptions: CascaderOptionType[]) => void;
        handlePopupVisibleChange: (popupVisible: boolean) => void;
        handleInputBlur: () => void;
        handleInputClick: (e: React.MouseEvent<HTMLInputElement>) => void;
        handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;
        handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
        clearSelection: (e: React.MouseEvent<HTMLElement>) => void;
        generateFilteredOptions(prefixCls: string | undefined, renderEmpty: RenderEmptyHandler): CascaderOptionType[] | {
            [x: string]: {} | null | undefined;
            disabled: boolean;
            isEmptyNode: boolean;
        }[];
        focus(): void;
        blur(): void;
        getPopupPlacement(direction?: DirectionType): string;
        renderCascader: ({ getPopupContainer: getContextPopupContainer, getPrefixCls, renderEmpty, direction, }: ConfigConsumerProps, locale: CascaderLocale) => JSX.Element;
        render(): JSX.Element;
    }
    export default Cascader;
}

declare module 'antd/node_modules/antd/lib/checkbox' {
    import * as React from 'react';
    import { CheckboxProps } from 'antd/node_modules/antd/lib/checkbox/Checkbox';
    import Group from 'antd/node_modules/antd/lib/checkbox/Group';
    export { CheckboxProps, CheckboxChangeEvent } from 'antd/node_modules/antd/lib/checkbox/Checkbox';
    export { CheckboxGroupProps, CheckboxOptionType } from 'antd/node_modules/antd/lib/checkbox/Group';
    interface CompoundedComponent extends React.ForwardRefExoticComponent<CheckboxProps & React.RefAttributes<HTMLInputElement>> {
        Group: typeof Group;
        __ANT_CHECKBOX: boolean;
    }
    const Checkbox: CompoundedComponent;
    export default Checkbox;
}

declare module 'antd/node_modules/antd/lib/col' {
    import { Col, ColProps, ColSize } from 'antd/node_modules/antd/lib/grid';
    export { ColProps, ColSize };
    export default Col;
}

declare module 'antd/node_modules/antd/lib/comment' {
    import * as React from 'react';
    export interface CommentProps {
        /** List of action items rendered below the comment content */
        actions?: Array<React.ReactNode>;
        /** The element to display as the comment author. */
        author?: React.ReactNode;
        /** The element to display as the comment avatar - generally an antd Avatar */
        avatar?: React.ReactNode;
        /** ClassName of comment */
        className?: string;
        /** The main content of the comment */
        content: React.ReactNode;
        /** Nested comments should be provided as children of the Comment */
        children?: React.ReactNode;
        /** Comment prefix defaults to '.ant-comment' */
        prefixCls?: string;
        /** Additional style for the comment */
        style?: React.CSSProperties;
        /** A datetime element containing the time to be displayed */
        datetime?: React.ReactNode;
    }
    const Comment: React.FC<CommentProps>;
    export default Comment;
}

declare module 'antd/node_modules/antd/lib/config-provider' {
    import * as React from 'react';
    import { ValidateMessages } from 'rc-field-form/lib/interface';
    import { RenderEmptyHandler } from 'antd/node_modules/antd/lib/config-provider/renderEmpty';
    import { Locale } from 'antd/node_modules/antd/lib/locale-provider';
    import { ConfigConsumer, ConfigContext, CSPConfig, DirectionType, ConfigConsumerProps } from 'antd/node_modules/antd/lib/config-provider/context';
    import SizeContext, { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    import { RequiredMark } from 'antd/node_modules/antd/lib/form/Form';
    export { RenderEmptyHandler, ConfigContext, ConfigConsumer, CSPConfig, DirectionType, ConfigConsumerProps, };
    export const configConsumerProps: string[];
    export interface ConfigProviderProps {
        getTargetContainer?: () => HTMLElement;
        getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        prefixCls?: string;
        iconPrefixCls?: string;
        children?: React.ReactNode;
        renderEmpty?: RenderEmptyHandler;
        csp?: CSPConfig;
        autoInsertSpaceInButton?: boolean;
        form?: {
            validateMessages?: ValidateMessages;
            requiredMark?: RequiredMark;
        };
        input?: {
            autoComplete?: string;
        };
        locale?: Locale;
        pageHeader?: {
            ghost: boolean;
        };
        componentSize?: SizeType;
        direction?: DirectionType;
        space?: {
            size?: SizeType | number;
        };
        virtual?: boolean;
        dropdownMatchSelectWidth?: boolean;
    }
    export const defaultPrefixCls = "ant";
    const setGlobalConfig: (params: Pick<ConfigProviderProps, 'prefixCls'>) => void;
    export const globalConfig: () => {
        getPrefixCls: (suffixCls?: string | undefined, customizePrefixCls?: string | undefined) => string;
        getRootPrefixCls: (rootPrefixCls?: string | undefined, customizePrefixCls?: string | undefined) => string;
    };
    const ConfigProvider: React.FC<ConfigProviderProps> & {
        ConfigContext: typeof ConfigContext;
        SizeContext: typeof SizeContext;
        config: typeof setGlobalConfig;
    };
    export default ConfigProvider;
}

declare module 'antd/node_modules/antd/lib/date-picker' {
    import { Moment } from 'moment';
    import { PickerProps, PickerDateProps, RangePickerProps as BaseRangePickerProps } from 'antd/node_modules/antd/lib/date-picker/generatePicker';
    export type DatePickerProps = PickerProps<Moment>;
    export type MonthPickerProps = Omit<PickerDateProps<Moment>, 'picker'>;
    export type WeekPickerProps = Omit<PickerDateProps<Moment>, 'picker'>;
    export type RangePickerProps = BaseRangePickerProps<Moment>;
    const DatePicker: import("react").ComponentClass<PickerProps<Moment>, any> & {
        WeekPicker: import("react").ComponentClass<Omit<PickerDateProps<Moment>, "picker">, any>;
        MonthPicker: import("react").ComponentClass<Omit<PickerDateProps<Moment>, "picker">, any>;
        YearPicker: import("react").ComponentClass<Omit<PickerDateProps<Moment>, "picker">, any>;
        RangePicker: import("react").ComponentClass<BaseRangePickerProps<Moment>, any>;
        TimePicker: import("react").ComponentClass<Omit<import("./generatePicker").PickerTimeProps<Moment>, "picker">, any>;
        QuarterPicker: import("react").ComponentClass<Omit<import("./generatePicker").PickerTimeProps<Moment>, "picker">, any>;
    };
    export default DatePicker;
}

declare module 'antd/node_modules/antd/lib/descriptions' {
    import * as React from 'react';
    import { Breakpoint } from 'antd/node_modules/antd/lib/_util/responsiveObserve';
    export interface DescriptionsContextProps {
        labelStyle?: React.CSSProperties;
        contentStyle?: React.CSSProperties;
    }
    export const DescriptionsContext: React.Context<DescriptionsContextProps>;
    export interface DescriptionsProps {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        bordered?: boolean;
        size?: 'middle' | 'small' | 'default';
        children?: React.ReactNode;
        title?: React.ReactNode;
        extra?: React.ReactNode;
        column?: number | Partial<Record<Breakpoint, number>>;
        layout?: 'horizontal' | 'vertical';
        colon?: boolean;
        labelStyle?: React.CSSProperties;
        contentStyle?: React.CSSProperties;
    }
    function Descriptions({ prefixCls: customizePrefixCls, title, extra, column, colon, bordered, layout, children, className, style, size, labelStyle, contentStyle, }: DescriptionsProps): JSX.Element;
    namespace Descriptions {
        var Item: React.FC<import("./Item").DescriptionsItemProps>;
    }
    export default Descriptions;
}

declare module 'antd/node_modules/antd/lib/divider' {
    import * as React from 'react';
    export interface DividerProps {
        prefixCls?: string;
        type?: 'horizontal' | 'vertical';
        orientation?: 'left' | 'right' | 'center';
        className?: string;
        children?: React.ReactNode;
        dashed?: boolean;
        style?: React.CSSProperties;
        plain?: boolean;
    }
    const Divider: React.FC<DividerProps>;
    export default Divider;
}

declare module 'antd/node_modules/antd/lib/dropdown' {
    import Dropdown from 'antd/node_modules/antd/lib/dropdown/dropdown';
    export { DropDownProps } from 'antd/node_modules/antd/lib/dropdown/dropdown';
    export { DropdownButtonProps } from 'antd/node_modules/antd/lib/dropdown/dropdown-button';
    export default Dropdown;
}

declare module 'antd/node_modules/antd/lib/drawer' {
    import * as React from 'react';
    type EventType = React.KeyboardEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement | HTMLButtonElement>;
    type getContainerFunc = () => HTMLElement;
    const PlacementTypes: ["top", "right", "bottom", "left"];
    type placementType = typeof PlacementTypes[number];
    export interface PushState {
        distance: string | number;
    }
    export interface DrawerProps {
        closable?: boolean;
        closeIcon?: React.ReactNode;
        destroyOnClose?: boolean;
        forceRender?: boolean;
        getContainer?: string | HTMLElement | getContainerFunc | false;
        maskClosable?: boolean;
        mask?: boolean;
        maskStyle?: React.CSSProperties;
        style?: React.CSSProperties;
        /** Wrapper dom node style of header and body */
        drawerStyle?: React.CSSProperties;
        headerStyle?: React.CSSProperties;
        bodyStyle?: React.CSSProperties;
        contentWrapperStyle?: React.CSSProperties;
        title?: React.ReactNode;
        visible?: boolean;
        width?: number | string;
        height?: number | string;
        zIndex?: number;
        prefixCls?: string;
        push?: boolean | PushState;
        placement?: placementType;
        onClose?: (e: EventType) => void;
        afterVisibleChange?: (visible: boolean) => void;
        className?: string;
        handler?: React.ReactNode;
        keyboard?: boolean;
        footer?: React.ReactNode;
        footerStyle?: React.CSSProperties;
        level?: string | string[] | null | undefined;
    }
    export interface IDrawerState {
        push?: boolean;
    }
    const DrawerWrapper: React.FC<DrawerProps>;
    export default DrawerWrapper;
}

declare module 'antd/node_modules/antd/lib/empty' {
    import * as React from 'react';
    export interface TransferLocale {
        description: string;
    }
    export interface EmptyProps {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        /** @since 3.16.0 */
        imageStyle?: React.CSSProperties;
        image?: React.ReactNode;
        description?: React.ReactNode;
        children?: React.ReactNode;
    }
    interface EmptyType extends React.FC<EmptyProps> {
        PRESENTED_IMAGE_DEFAULT: React.ReactNode;
        PRESENTED_IMAGE_SIMPLE: React.ReactNode;
    }
    const Empty: EmptyType;
    export default Empty;
}

declare module 'antd/node_modules/antd/lib/form' {
    import { Rule, RuleObject, RuleRender } from 'rc-field-form/lib/interface';
    import InternalForm, { useForm, FormInstance, FormProps } from 'antd/node_modules/antd/lib/form/Form';
    import Item, { FormItemProps } from 'antd/node_modules/antd/lib/form/FormItem';
    import ErrorList, { ErrorListProps } from 'antd/node_modules/antd/lib/form/ErrorList';
    import List, { FormListProps } from 'antd/node_modules/antd/lib/form/FormList';
    import { FormProvider } from 'antd/node_modules/antd/lib/form/context';
    type InternalFormType = typeof InternalForm;
    interface FormInterface extends InternalFormType {
        useForm: typeof useForm;
        Item: typeof Item;
        List: typeof List;
        ErrorList: typeof ErrorList;
        Provider: typeof FormProvider;
        /** @deprecated Only for warning usage. Do not use. */
        create: () => void;
    }
    const Form: FormInterface;
    export { FormInstance, FormProps, FormItemProps, ErrorListProps, Rule, RuleObject, RuleRender, FormListProps, };
    export default Form;
}

declare module 'antd/node_modules/antd/lib/grid' {
    import Row from 'antd/node_modules/antd/lib/grid/row';
    import Col from 'antd/node_modules/antd/lib/grid/col';
    import useBreakpoint from 'antd/node_modules/antd/lib/grid/hooks/useBreakpoint';
    export { RowProps } from 'antd/node_modules/antd/lib/grid/row';
    export { ColProps, ColSize } from 'antd/node_modules/antd/lib/grid/col';
    export { Row, Col };
    const _default: {
        useBreakpoint: typeof useBreakpoint;
    };
    export default _default;
}

declare module 'antd/node_modules/antd/lib/input' {
    import Input from 'antd/node_modules/antd/lib/input/Input';
    export { InputProps } from 'antd/node_modules/antd/lib/input/Input';
    export { GroupProps } from 'antd/node_modules/antd/lib/input/Group';
    export { SearchProps } from 'antd/node_modules/antd/lib/input/Search';
    export { TextAreaProps } from 'antd/node_modules/antd/lib/input/TextArea';
    export { PasswordProps } from 'antd/node_modules/antd/lib/input/Password';
    export default Input;
}

declare module 'antd/node_modules/antd/lib/image' {
    import * as React from 'react';
    import { ImageProps } from 'rc-image';
    import PreviewGroup from 'antd/node_modules/antd/lib/image/PreviewGroup';
    export interface CompositionImage<P> extends React.FC<P> {
        PreviewGroup: typeof PreviewGroup;
    }
    const Image: CompositionImage<ImageProps>;
    export { ImageProps };
    export default Image;
}

declare module 'antd/node_modules/antd/lib/input-number' {
    import * as React from 'react';
    import { InputNumberProps as RcInputNumberProps } from 'rc-input-number';
    import { Omit } from 'antd/node_modules/antd/lib/_util/type';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    type ValueType = string | number;
    export interface InputNumberProps<T extends ValueType = ValueType> extends Omit<RcInputNumberProps<T>, 'size'> {
        prefixCls?: string;
        size?: SizeType;
        bordered?: boolean;
    }
    const _default: (<T extends ValueType = ValueType>(props: InputNumberProps<T> & {
        children?: React.ReactNode;
    } & {
        ref?: React.Ref<HTMLInputElement> | undefined;
    }) => React.ReactElement) & {
        displayName?: string | undefined;
    };
    export default _default;
}

declare module 'antd/node_modules/antd/lib/layout' {
    import { BasicProps, Content, Footer, Header } from 'antd/node_modules/antd/lib/layout/layout';
    import Sider from 'antd/node_modules/antd/lib/layout/Sider';
    export { BasicProps as LayoutProps } from 'antd/node_modules/antd/lib/layout/layout';
    export { SiderProps } from 'antd/node_modules/antd/lib/layout/Sider';
    interface LayoutType extends React.FC<BasicProps> {
        Header: typeof Header;
        Footer: typeof Footer;
        Content: typeof Content;
        Sider: typeof Sider;
    }
    const Layout: LayoutType;
    export default Layout;
}

declare module 'antd/node_modules/antd/lib/list' {
    import * as React from 'react';
    import { SpinProps } from 'antd/node_modules/antd/lib/spin';
    import { PaginationConfig } from 'antd/node_modules/antd/lib/pagination';
    export { ListItemProps, ListItemMetaProps } from 'antd/node_modules/antd/lib/list/Item';
    export type ColumnCount = number;
    export type ColumnType = 'gutter' | 'column' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
    export interface ListGridType {
        gutter?: number;
        column?: ColumnCount;
        xs?: ColumnCount;
        sm?: ColumnCount;
        md?: ColumnCount;
        lg?: ColumnCount;
        xl?: ColumnCount;
        xxl?: ColumnCount;
    }
    export type ListSize = 'small' | 'default' | 'large';
    export type ListItemLayout = 'horizontal' | 'vertical';
    export interface ListProps<T> {
        bordered?: boolean;
        className?: string;
        style?: React.CSSProperties;
        children?: React.ReactNode;
        dataSource?: T[];
        extra?: React.ReactNode;
        grid?: ListGridType;
        id?: string;
        itemLayout?: ListItemLayout;
        loading?: boolean | SpinProps;
        loadMore?: React.ReactNode;
        pagination?: PaginationConfig | false;
        prefixCls?: string;
        rowKey?: ((item: T) => string) | string;
        renderItem?: (item: T, index: number) => React.ReactNode;
        size?: ListSize;
        split?: boolean;
        header?: React.ReactNode;
        footer?: React.ReactNode;
        locale?: ListLocale;
    }
    export interface ListLocale {
        emptyText: React.ReactNode | (() => React.ReactNode);
    }
    export interface ListConsumerProps {
        grid?: any;
        itemLayout?: string;
    }
    export const ListContext: React.Context<ListConsumerProps>;
    export const ListConsumer: React.Consumer<ListConsumerProps>;
    function List<T>({ pagination, prefixCls: customizePrefixCls, bordered, split, className, children, itemLayout, loadMore, grid, dataSource, size, header, footer, loading, rowKey, renderItem, locale, ...rest }: ListProps<T>): JSX.Element;
    namespace List {
        var Item: import("./Item").ListItemTypeProps;
    }
    export default List;
}

declare module 'antd/node_modules/antd/lib/message' {
    import * as React from 'react';
    import { NotificationInstance as RCNotificationInstance } from 'rc-notification/lib/Notification';
    type NoticeType = 'info' | 'success' | 'error' | 'warning' | 'loading';
    export function getKeyThenIncreaseKey(): number;
    export interface ConfigOptions {
        top?: number;
        duration?: number;
        prefixCls?: string;
        getContainer?: () => HTMLElement;
        transitionName?: string;
        maxCount?: number;
        rtl?: boolean;
    }
    export interface ThenableArgument {
        (val: any): void;
    }
    export interface MessageType extends PromiseLike<any> {
        (): void;
    }
    export interface ArgsProps {
        content: React.ReactNode;
        duration: number | null;
        type: NoticeType;
        prefixCls?: string;
        rootPrefixCls?: string;
        onClose?: () => void;
        icon?: React.ReactNode;
        key?: string | number;
        style?: React.CSSProperties;
        className?: string;
        onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
    }
    type ConfigContent = React.ReactNode | string;
    type ConfigDuration = number | (() => void);
    type JointContent = ConfigContent | ArgsProps;
    export type ConfigOnClose = () => void;
    export function attachTypeApi(originalApi: any, type: string): void;
    export interface MessageInstance {
        info(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;
        success(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;
        error(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;
        warning(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;
        loading(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;
        open(args: ArgsProps): MessageType;
    }
    export interface MessageApi extends MessageInstance {
        warn(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;
        config(options: ConfigOptions): void;
        destroy(messageKey?: React.Key): void;
        useMessage(): [MessageInstance, React.ReactElement];
    }
    /** @private test Only function. Not work on production */
    export const getInstance: () => RCNotificationInstance | null;
    const _default: MessageApi;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/menu' {
    import * as React from 'react';
    import { Divider, ItemGroup, MenuProps as RcMenuProps } from 'rc-menu';
    import SubMenu, { SubMenuProps } from 'antd/node_modules/antd/lib/menu/SubMenu';
    import Item, { MenuItemProps } from 'antd/node_modules/antd/lib/menu/MenuItem';
    import { MenuTheme } from 'antd/node_modules/antd/lib/menu/MenuContext';
    export { MenuItemGroupProps } from 'rc-menu';
    export type MenuMode = 'vertical' | 'vertical-left' | 'vertical-right' | 'horizontal' | 'inline';
    export interface MenuProps extends RcMenuProps {
        theme?: MenuTheme;
        inlineIndent?: number;
    }
    class Menu extends React.Component<MenuProps, {}> {
        static Divider: typeof Divider;
        static Item: typeof Item;
        static SubMenu: typeof SubMenu;
        static ItemGroup: typeof ItemGroup;
        render(): JSX.Element;
    }
    export { MenuTheme, SubMenuProps, MenuItemProps };
    export default Menu;
}

declare module 'antd/node_modules/antd/lib/mentions' {
    import * as React from 'react';
    import { MentionsProps as RcMentionsProps } from 'rc-mentions/lib/Mentions';
    export const Option: React.SFC<import("rc-mentions/lib/Option").OptionProps>;
    export type MentionPlacement = 'top' | 'bottom';
    export interface OptionProps {
        value: string;
        children: React.ReactNode;
        [key: string]: any;
    }
    export interface MentionProps extends RcMentionsProps {
        loading?: boolean;
    }
    export interface MentionState {
        focused: boolean;
    }
    interface MentionsConfig {
        prefix?: string | string[];
        split?: string;
    }
    interface MentionsEntity {
        prefix: string;
        value: string;
    }
    interface CompoundedComponent extends React.ForwardRefExoticComponent<MentionProps & React.RefAttributes<HTMLElement>> {
        Option: typeof Option;
        getMentions: (value: string, config?: MentionsConfig) => MentionsEntity[];
    }
    const Mentions: CompoundedComponent;
    export default Mentions;
}

declare module 'antd/node_modules/antd/lib/modal' {
    import OriginModal from 'antd/node_modules/antd/lib/modal/Modal';
    import { ModalStaticFunctions, modalGlobalConfig } from 'antd/node_modules/antd/lib/modal/confirm';
    export { ActionButtonProps } from 'antd/node_modules/antd/lib/modal/ActionButton';
    export { ModalProps, ModalFuncProps } from 'antd/node_modules/antd/lib/modal/Modal';
    type ModalType = typeof OriginModal & ModalStaticFunctions & {
        destroyAll: () => void;
        config: typeof modalGlobalConfig;
    };
    const Modal: ModalType;
    export default Modal;
}

declare module 'antd/node_modules/antd/lib/statistic' {
    import Statistic, { StatisticProps } from 'antd/node_modules/antd/lib/statistic/Statistic';
    export { StatisticProps };
    export default Statistic;
}

declare module 'antd/node_modules/antd/lib/notification' {
    import * as React from 'react';
    import { NotificationInstance as RCNotificationInstance } from 'rc-notification/lib/Notification';
    export type NotificationPlacement = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
    export type IconType = 'success' | 'info' | 'error' | 'warning';
    export interface ConfigProps {
        top?: number;
        bottom?: number;
        duration?: number;
        prefixCls?: string;
        placement?: NotificationPlacement;
        getContainer?: () => HTMLElement;
        closeIcon?: React.ReactNode;
        rtl?: boolean;
    }
    export interface ArgsProps {
        message: React.ReactNode;
        description?: React.ReactNode;
        btn?: React.ReactNode;
        key?: string;
        onClose?: () => void;
        duration?: number | null;
        icon?: React.ReactNode;
        placement?: NotificationPlacement;
        style?: React.CSSProperties;
        prefixCls?: string;
        className?: string;
        readonly type?: IconType;
        onClick?: () => void;
        top?: number;
        bottom?: number;
        getContainer?: () => HTMLElement;
        closeIcon?: React.ReactNode;
    }
    export interface NotificationInstance {
        success(args: ArgsProps): void;
        error(args: ArgsProps): void;
        info(args: ArgsProps): void;
        warning(args: ArgsProps): void;
        open(args: ArgsProps): void;
    }
    export interface NotificationApi extends NotificationInstance {
        warn(args: ArgsProps): void;
        close(key: string): void;
        config(options: ConfigProps): void;
        destroy(): void;
        useNotification: () => [NotificationInstance, React.ReactElement];
    }
    /** @private test Only function. Not work on production */
    export const getInstance: (cacheKey: string) => Promise<RCNotificationInstance | null>;
    const _default: NotificationApi;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/page-header' {
    import * as React from 'react';
    import { TagType } from 'antd/node_modules/antd/lib/tag';
    import Breadcrumb, { BreadcrumbProps } from 'antd/node_modules/antd/lib/breadcrumb';
    import { AvatarProps } from 'antd/node_modules/antd/lib/avatar';
    export interface PageHeaderProps {
        backIcon?: React.ReactNode;
        prefixCls?: string;
        title?: React.ReactNode;
        subTitle?: React.ReactNode;
        style?: React.CSSProperties;
        breadcrumb?: BreadcrumbProps | React.ReactElement<typeof Breadcrumb>;
        breadcrumbRender?: (props: PageHeaderProps, defaultDom: React.ReactNode) => React.ReactNode;
        tags?: React.ReactElement<TagType> | React.ReactElement<TagType>[];
        footer?: React.ReactNode;
        extra?: React.ReactNode;
        avatar?: AvatarProps;
        onBack?: (e?: React.MouseEvent<HTMLDivElement>) => void;
        className?: string;
        ghost?: boolean;
    }
    const PageHeader: React.FC<PageHeaderProps>;
    export default PageHeader;
}

declare module 'antd/node_modules/antd/lib/pagination' {
    import Pagination from 'antd/node_modules/antd/lib/pagination/Pagination';
    export { PaginationProps, PaginationConfig } from 'antd/node_modules/antd/lib/pagination/Pagination';
    export default Pagination;
}

declare module 'antd/node_modules/antd/lib/popconfirm' {
    import * as React from 'react';
    import { AbstractTooltipProps } from 'antd/node_modules/antd/lib/tooltip';
    import { LegacyButtonType, ButtonProps } from 'antd/node_modules/antd/lib/button/button';
    import { RenderFunction } from 'antd/node_modules/antd/lib/_util/getRenderPropValue';
    export interface PopconfirmProps extends AbstractTooltipProps {
        title: React.ReactNode | RenderFunction;
        disabled?: boolean;
        onConfirm?: (e?: React.MouseEvent<HTMLElement>) => void;
        onCancel?: (e?: React.MouseEvent<HTMLElement>) => void;
        okText?: React.ReactNode;
        okType?: LegacyButtonType;
        cancelText?: React.ReactNode;
        okButtonProps?: ButtonProps;
        cancelButtonProps?: ButtonProps;
        icon?: React.ReactNode;
        onVisibleChange?: (visible: boolean, e?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLDivElement>) => void;
    }
    export interface PopconfirmState {
        visible?: boolean;
    }
    export interface PopconfirmLocale {
        okText: string;
        cancelText: string;
    }
    const Popconfirm: React.ForwardRefExoticComponent<PopconfirmProps & React.RefAttributes<unknown>>;
    export default Popconfirm;
}

declare module 'antd/node_modules/antd/lib/popover' {
    import * as React from 'react';
    import { AbstractTooltipProps } from 'antd/node_modules/antd/lib/tooltip';
    import { RenderFunction } from 'antd/node_modules/antd/lib/_util/getRenderPropValue';
    export interface PopoverProps extends AbstractTooltipProps {
        title?: React.ReactNode | RenderFunction;
        content?: React.ReactNode | RenderFunction;
    }
    const Popover: React.ForwardRefExoticComponent<PopoverProps & React.RefAttributes<unknown>>;
    export default Popover;
}

declare module 'antd/node_modules/antd/lib/progress' {
    import Progress from 'antd/node_modules/antd/lib/progress/progress';
    export { ProgressProps } from 'antd/node_modules/antd/lib/progress/progress';
    export default Progress;
}

declare module 'antd/node_modules/antd/lib/radio' {
    import * as React from 'react';
    import Group from 'antd/node_modules/antd/lib/radio/group';
    import Button from 'antd/node_modules/antd/lib/radio/radioButton';
    import { RadioProps } from 'antd/node_modules/antd/lib/radio/interface';
    export { RadioGroupButtonStyle, RadioGroupOptionType, RadioGroupProps, RadioGroupContextProps, RadioProps, RadioChangeEventTarget, RadioChangeEvent, } from 'antd/node_modules/antd/lib/radio/interface';
    interface CompoundedComponent extends React.ForwardRefExoticComponent<RadioProps & React.RefAttributes<HTMLElement>> {
        Group: typeof Group;
        Button: typeof Button;
    }
    const Radio: CompoundedComponent;
    export { Button, Group };
    export default Radio;
}

declare module 'antd/node_modules/antd/lib/rate' {
    import * as React from 'react';
    export interface RateProps {
        prefixCls?: string;
        count?: number;
        value?: number;
        defaultValue?: number;
        allowHalf?: boolean;
        allowClear?: boolean;
        disabled?: boolean;
        tooltips?: Array<string>;
        onChange?: (value: number) => void;
        onHoverChange?: (value: number) => void;
        character?: React.ReactNode;
        className?: string;
        style?: React.CSSProperties;
    }
    const Rate: React.ForwardRefExoticComponent<RateProps & React.RefAttributes<unknown>>;
    export default Rate;
}

declare module 'antd/node_modules/antd/lib/result' {
    import * as React from 'react';
    export const IconMap: {
        success: React.ForwardRefExoticComponent<Pick<import("@ant-design/icons/lib/components/AntdIcon").AntdIconProps, "children" | "size" | "cite" | "data" | "form" | "label" | "slot" | "span" | "style" | "summary" | "title" | "pattern" | "className" | "value" | "disabled" | "dir" | "max" | "required" | "default" | "high" | "low" | "start" | "open" | "media" | "hidden" | "async" | "defer" | "manifest" | "color" | "content" | "wrap" | "multiple" | "height" | "rotate" | "translate" | "width" | "prefix" | "src" | "key" | "list" | "step" | "aria-label" | "spin" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "as" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "controls" | "coords" | "crossOrigin" | "dateTime" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "href" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "loop" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "method" | "min" | "minLength" | "muted" | "name" | "nonce" | "noValidate" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "sizes" | "srcDoc" | "srcLang" | "srcSet" | "target" | "type" | "useMap" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "id" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "twoToneColor"> & React.RefAttributes<HTMLSpanElement>>;
        error: React.ForwardRefExoticComponent<Pick<import("@ant-design/icons/lib/components/AntdIcon").AntdIconProps, "children" | "size" | "cite" | "data" | "form" | "label" | "slot" | "span" | "style" | "summary" | "title" | "pattern" | "className" | "value" | "disabled" | "dir" | "max" | "required" | "default" | "high" | "low" | "start" | "open" | "media" | "hidden" | "async" | "defer" | "manifest" | "color" | "content" | "wrap" | "multiple" | "height" | "rotate" | "translate" | "width" | "prefix" | "src" | "key" | "list" | "step" | "aria-label" | "spin" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "as" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "controls" | "coords" | "crossOrigin" | "dateTime" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "href" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "loop" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "method" | "min" | "minLength" | "muted" | "name" | "nonce" | "noValidate" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "sizes" | "srcDoc" | "srcLang" | "srcSet" | "target" | "type" | "useMap" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "id" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "twoToneColor"> & React.RefAttributes<HTMLSpanElement>>;
        info: React.ForwardRefExoticComponent<Pick<import("@ant-design/icons/lib/components/AntdIcon").AntdIconProps, "children" | "size" | "cite" | "data" | "form" | "label" | "slot" | "span" | "style" | "summary" | "title" | "pattern" | "className" | "value" | "disabled" | "dir" | "max" | "required" | "default" | "high" | "low" | "start" | "open" | "media" | "hidden" | "async" | "defer" | "manifest" | "color" | "content" | "wrap" | "multiple" | "height" | "rotate" | "translate" | "width" | "prefix" | "src" | "key" | "list" | "step" | "aria-label" | "spin" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "as" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "controls" | "coords" | "crossOrigin" | "dateTime" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "href" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "loop" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "method" | "min" | "minLength" | "muted" | "name" | "nonce" | "noValidate" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "sizes" | "srcDoc" | "srcLang" | "srcSet" | "target" | "type" | "useMap" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "id" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "twoToneColor"> & React.RefAttributes<HTMLSpanElement>>;
        warning: React.ForwardRefExoticComponent<Pick<import("@ant-design/icons/lib/components/AntdIcon").AntdIconProps, "children" | "size" | "cite" | "data" | "form" | "label" | "slot" | "span" | "style" | "summary" | "title" | "pattern" | "className" | "value" | "disabled" | "dir" | "max" | "required" | "default" | "high" | "low" | "start" | "open" | "media" | "hidden" | "async" | "defer" | "manifest" | "color" | "content" | "wrap" | "multiple" | "height" | "rotate" | "translate" | "width" | "prefix" | "src" | "key" | "list" | "step" | "aria-label" | "spin" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "as" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "controls" | "coords" | "crossOrigin" | "dateTime" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "href" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "loop" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "method" | "min" | "minLength" | "muted" | "name" | "nonce" | "noValidate" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "sizes" | "srcDoc" | "srcLang" | "srcSet" | "target" | "type" | "useMap" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "id" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "twoToneColor"> & React.RefAttributes<HTMLSpanElement>>;
    };
    export const ExceptionMap: {
        '404': () => JSX.Element;
        '500': () => JSX.Element;
        '403': () => JSX.Element;
    };
    export type ExceptionStatusType = 403 | 404 | 500 | '403' | '404' | '500';
    export type ResultStatusType = ExceptionStatusType | keyof typeof IconMap;
    export interface ResultProps {
        icon?: React.ReactNode;
        status?: ResultStatusType;
        title?: React.ReactNode;
        subTitle?: React.ReactNode;
        extra?: React.ReactNode;
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
    }
    export interface ResultType extends React.FC<ResultProps> {
        PRESENTED_IMAGE_404: React.ReactNode;
        PRESENTED_IMAGE_403: React.ReactNode;
        PRESENTED_IMAGE_500: React.ReactNode;
    }
    const Result: ResultType;
    export default Result;
}

declare module 'antd/node_modules/antd/lib/row' {
    import { Row, RowProps } from 'antd/node_modules/antd/lib/grid';
    export { RowProps };
    export default Row;
}

declare module 'antd/node_modules/antd/lib/select' {
    import * as React from 'react';
    import { Option, OptGroup, SelectProps as RcSelectProps } from 'rc-select';
    import { OptionProps } from 'rc-select/lib/Option';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    type RawValue = string | number;
    export { OptionProps };
    export type OptionType = typeof Option;
    export interface LabeledValue {
        key?: string;
        value: RawValue;
        label: React.ReactNode;
    }
    export type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[] | undefined;
    export interface InternalSelectProps<VT> extends Omit<RcSelectProps<VT>, 'mode'> {
        suffixIcon?: React.ReactNode;
        size?: SizeType;
        mode?: 'multiple' | 'tags' | 'SECRET_COMBOBOX_MODE_DO_NOT_USE';
        bordered?: boolean;
    }
    export interface SelectProps<VT> extends Omit<InternalSelectProps<VT>, 'inputIcon' | 'mode' | 'getInputElement' | 'backfill'> {
        mode?: 'multiple' | 'tags';
    }
    export interface RefSelectProps {
        focus: () => void;
        blur: () => void;
    }
    const SelectRef: <VT extends SelectValue = SelectValue>(props: SelectProps<VT> & {
        ref?: React.Ref<RefSelectProps> | undefined;
    }) => React.ReactElement;
    type InternalSelectType = typeof SelectRef;
    interface SelectInterface extends InternalSelectType {
        SECRET_COMBOBOX_MODE_DO_NOT_USE: string;
        Option: typeof Option;
        OptGroup: typeof OptGroup;
    }
    const Select: SelectInterface;
    export default Select;
}

declare module 'antd/node_modules/antd/lib/skeleton' {
    import Skeleton from 'antd/node_modules/antd/lib/skeleton/Skeleton';
    export { SkeletonProps } from 'antd/node_modules/antd/lib/skeleton/Skeleton';
    export default Skeleton;
}

declare module 'antd/node_modules/antd/lib/slider' {
    import * as React from 'react';
    import { TooltipPlacement } from 'antd/node_modules/antd/lib/tooltip';
    export interface SliderMarks {
        [key: number]: React.ReactNode | {
            style: React.CSSProperties;
            label: React.ReactNode;
        };
    }
    interface HandleGeneratorInfo {
        value?: number;
        dragging?: boolean;
        index: number;
    }
    export type HandleGeneratorFn = (config: {
        tooltipPrefixCls?: string;
        prefixCls?: string;
        info: HandleGeneratorInfo;
    }) => React.ReactElement;
    export interface SliderBaseProps {
        prefixCls?: string;
        tooltipPrefixCls?: string;
        reverse?: boolean;
        min?: number;
        max?: number;
        step?: null | number;
        marks?: SliderMarks;
        dots?: boolean;
        included?: boolean;
        disabled?: boolean;
        vertical?: boolean;
        tipFormatter?: null | ((value?: number) => React.ReactNode);
        className?: string;
        id?: string;
        style?: React.CSSProperties;
        tooltipVisible?: boolean;
        tooltipPlacement?: TooltipPlacement;
        getTooltipPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        autoFocus?: boolean;
    }
    export interface SliderSingleProps extends SliderBaseProps {
        range?: false;
        value?: number;
        defaultValue?: number;
        onChange?: (value: number) => void;
        onAfterChange?: (value: number) => void;
        handleStyle?: React.CSSProperties;
        trackStyle?: React.CSSProperties;
    }
    export interface SliderRangeProps extends SliderBaseProps {
        range: true | SliderRange;
        value?: [number, number];
        defaultValue?: [number, number];
        onChange?: (value: [number, number]) => void;
        onAfterChange?: (value: [number, number]) => void;
        handleStyle?: React.CSSProperties[];
        trackStyle?: React.CSSProperties[];
    }
    interface SliderRange {
        draggableTrack?: boolean;
    }
    export type Visibles = {
        [index: number]: boolean;
    };
    const Slider: React.ForwardRefExoticComponent<(SliderSingleProps | SliderRangeProps) & React.RefAttributes<unknown>>;
    export default Slider;
}

declare module 'antd/node_modules/antd/lib/space' {
    import * as React from 'react';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export const SpaceContext: React.Context<{
        latestIndex: number;
        horizontalSize: number;
        verticalSize: number;
        supportFlexGap: boolean;
    }>;
    export type SpaceSize = SizeType | number;
    export interface SpaceProps extends React.HTMLAttributes<HTMLDivElement> {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        size?: SpaceSize | [SpaceSize, SpaceSize];
        direction?: 'horizontal' | 'vertical';
        align?: 'start' | 'end' | 'center' | 'baseline';
        split?: React.ReactNode;
        wrap?: boolean;
    }
    const Space: React.FC<SpaceProps>;
    export default Space;
}

declare module 'antd/node_modules/antd/lib/spin' {
    import * as React from 'react';
    import { ConfigConsumerProps } from 'antd/node_modules/antd/lib/config-provider';
    const SpinSizes: ["small", "default", "large"];
    export type SpinSize = typeof SpinSizes[number];
    export type SpinIndicator = React.ReactElement<HTMLElement>;
    export interface SpinProps {
        prefixCls?: string;
        className?: string;
        spinning?: boolean;
        style?: React.CSSProperties;
        size?: SpinSize;
        tip?: string;
        delay?: number;
        wrapperClassName?: string;
        indicator?: SpinIndicator;
    }
    export interface SpinState {
        spinning?: boolean;
        notCssAnimationSupported?: boolean;
    }
    class Spin extends React.Component<SpinProps, SpinState> {
        static defaultProps: {
            spinning: boolean;
            size: "small" | "large" | "default";
            wrapperClassName: string;
        };
        static setDefaultIndicator(indicator: React.ReactNode): void;
        originalUpdateSpinning: () => void;
        constructor(props: SpinProps);
        componentDidMount(): void;
        componentDidUpdate(): void;
        componentWillUnmount(): void;
        debouncifyUpdateSpinning: (props?: SpinProps | undefined) => void;
        updateSpinning: () => void;
        cancelExistingSpin(): void;
        isNestedPattern(): boolean;
        renderSpin: ({ getPrefixCls, direction }: ConfigConsumerProps) => JSX.Element;
        render(): JSX.Element;
    }
    export default Spin;
}

declare module 'antd/node_modules/antd/lib/steps' {
    import * as React from 'react';
    export interface StepsProps {
        type?: 'default' | 'navigation';
        className?: string;
        current?: number;
        direction?: 'horizontal' | 'vertical';
        iconPrefix?: string;
        initial?: number;
        labelPlacement?: 'horizontal' | 'vertical';
        prefixCls?: string;
        progressDot?: boolean | Function;
        responsive?: boolean;
        size?: 'default' | 'small';
        status?: 'wait' | 'process' | 'finish' | 'error';
        style?: React.CSSProperties;
        percent?: number;
        onChange?: (current: number) => void;
    }
    export interface StepProps {
        className?: string;
        description?: React.ReactNode;
        icon?: React.ReactNode;
        onClick?: React.MouseEventHandler<HTMLElement>;
        status?: 'wait' | 'process' | 'finish' | 'error';
        disabled?: boolean;
        title?: React.ReactNode;
        subTitle?: React.ReactNode;
        style?: React.CSSProperties;
    }
    interface StepsType extends React.FC<StepsProps> {
        Step: React.ClassicComponentClass<StepProps>;
    }
    const Steps: StepsType;
    export default Steps;
}

declare module 'antd/node_modules/antd/lib/switch' {
    import * as React from 'react';
    export type SwitchSize = 'small' | 'default';
    export type SwitchChangeEventHandler = (checked: boolean, event: MouseEvent) => void;
    export type SwitchClickEventHandler = SwitchChangeEventHandler;
    export interface SwitchProps {
        prefixCls?: string;
        size?: SwitchSize;
        className?: string;
        checked?: boolean;
        defaultChecked?: boolean;
        onChange?: SwitchChangeEventHandler;
        onClick?: SwitchClickEventHandler;
        checkedChildren?: React.ReactNode;
        unCheckedChildren?: React.ReactNode;
        disabled?: boolean;
        loading?: boolean;
        autoFocus?: boolean;
        style?: React.CSSProperties;
        title?: string;
        tabIndex?: number;
    }
    interface CompoundedComponent extends React.ForwardRefExoticComponent<SwitchProps & React.RefAttributes<HTMLElement>> {
        __ANT_SWITCH: boolean;
    }
    const Switch: CompoundedComponent;
    export default Switch;
}

declare module 'antd/node_modules/antd/lib/table' {
    import Table, { TableProps, TablePaginationConfig } from 'antd/node_modules/antd/lib/table/Table';
    export { ColumnProps } from 'antd/node_modules/antd/lib/table/Column';
    export { ColumnsType, ColumnType, ColumnGroupType } from 'antd/node_modules/antd/lib/table/interface';
    export { TableProps, TablePaginationConfig };
    export default Table;
}

declare module 'antd/node_modules/antd/lib/transfer' {
    import * as React from 'react';
    import List, { TransferListProps } from 'antd/node_modules/antd/lib/transfer/list';
    import Search from 'antd/node_modules/antd/lib/transfer/search';
    import { RenderEmptyHandler } from 'antd/node_modules/antd/lib/config-provider';
    import { TransferListBodyProps } from 'antd/node_modules/antd/lib/transfer/ListBody';
    import { PaginationType } from 'antd/node_modules/antd/lib/transfer/interface';
    export { TransferListProps } from 'antd/node_modules/antd/lib/transfer/list';
    export { TransferOperationProps } from 'antd/node_modules/antd/lib/transfer/operation';
    export { TransferSearchProps } from 'antd/node_modules/antd/lib/transfer/search';
    export type TransferDirection = 'left' | 'right';
    export interface RenderResultObject {
        label: React.ReactElement;
        value: string;
    }
    export type RenderResult = React.ReactElement | RenderResultObject | string | null;
    export interface TransferItem {
        key?: string;
        title?: string;
        description?: string;
        disabled?: boolean;
        [name: string]: any;
    }
    export type KeyWise<T> = T & {
        key: string;
    };
    export type KeyWiseTransferItem = KeyWise<TransferItem>;
    type TransferRender<RecordType> = (item: RecordType) => RenderResult;
    export interface ListStyle {
        direction: TransferDirection;
    }
    export type SelectAllLabel = React.ReactNode | ((info: {
        selectedCount: number;
        totalCount: number;
    }) => React.ReactNode);
    export interface TransferLocale {
        titles: React.ReactNode[];
        notFoundContent?: React.ReactNode;
        searchPlaceholder: string;
        itemUnit: string;
        itemsUnit: string;
        remove: string;
        selectAll: string;
        selectCurrent: string;
        selectInvert: string;
        removeAll: string;
        removeCurrent: string;
    }
    export interface TransferProps<RecordType> {
        prefixCls?: string;
        className?: string;
        disabled?: boolean;
        dataSource: RecordType[];
        targetKeys?: string[];
        selectedKeys?: string[];
        render?: TransferRender<RecordType>;
        onChange?: (targetKeys: string[], direction: TransferDirection, moveKeys: string[]) => void;
        onSelectChange?: (sourceSelectedKeys: string[], targetSelectedKeys: string[]) => void;
        style?: React.CSSProperties;
        listStyle: ((style: ListStyle) => React.CSSProperties) | React.CSSProperties;
        operationStyle?: React.CSSProperties;
        titles?: React.ReactNode[];
        operations?: string[];
        showSearch?: boolean;
        filterOption?: (inputValue: string, item: RecordType) => boolean;
        locale?: Partial<TransferLocale>;
        footer?: (props: TransferListProps<RecordType>) => React.ReactNode;
        rowKey?: (record: RecordType) => string;
        onSearch?: (direction: TransferDirection, value: string) => void;
        onScroll?: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;
        children?: (props: TransferListBodyProps<RecordType>) => React.ReactNode;
        showSelectAll?: boolean;
        selectAllLabels?: SelectAllLabel[];
        oneWay?: boolean;
        pagination?: PaginationType;
    }
    interface TransferState {
        sourceSelectedKeys: string[];
        targetSelectedKeys: string[];
    }
    class Transfer<RecordType extends TransferItem = TransferItem> extends React.Component<TransferProps<RecordType>, TransferState> {
        static List: typeof List;
        static Operation: ({ disabled, moveToLeft, moveToRight, leftArrowText, rightArrowText, leftActive, rightActive, className, style, direction, oneWay, }: import("./operation").TransferOperationProps) => JSX.Element;
        static Search: typeof Search;
        static defaultProps: {
            dataSource: never[];
            locale: {};
            showSearch: boolean;
            listStyle: () => void;
        };
        static getDerivedStateFromProps<T>({ selectedKeys, targetKeys, pagination, children, }: TransferProps<T>): {
            sourceSelectedKeys: string[];
            targetSelectedKeys: string[];
        } | null;
        separatedDataSource: {
            leftDataSource: RecordType[];
            rightDataSource: RecordType[];
        } | null;
        constructor(props: TransferProps<RecordType>);
        setStateKeys: (direction: TransferDirection, keys: string[] | ((prevKeys: string[]) => string[])) => void;
        getTitles(transferLocale: TransferLocale): React.ReactNode[];
        getLocale: (transferLocale: TransferLocale, renderEmpty: RenderEmptyHandler) => {
            titles: React.ReactNode[];
            notFoundContent: string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined;
            searchPlaceholder: string;
            itemUnit: string;
            itemsUnit: string;
            remove: string;
            selectAll: string;
            selectCurrent: string;
            selectInvert: string;
            removeAll: string;
            removeCurrent: string;
        };
        moveTo: (direction: TransferDirection) => void;
        moveToLeft: () => void;
        moveToRight: () => void;
        onItemSelectAll: (direction: TransferDirection, selectedKeys: string[], checkAll: boolean) => void;
        onLeftItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;
        onRightItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;
        handleFilter: (direction: TransferDirection, e: React.ChangeEvent<HTMLInputElement>) => void;
        handleLeftFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;
        handleRightFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;
        handleClear: (direction: TransferDirection) => void;
        handleLeftClear: () => void;
        handleRightClear: () => void;
        onItemSelect: (direction: TransferDirection, selectedKey: string, checked: boolean) => void;
        onLeftItemSelect: (selectedKey: string, checked: boolean) => void;
        onRightItemSelect: (selectedKey: string, checked: boolean) => void;
        onRightItemRemove: (selectedKeys: string[]) => void;
        handleScroll: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;
        handleLeftScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;
        handleRightScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;
        handleSelectChange(direction: TransferDirection, holder: string[]): void;
        handleListStyle: (listStyle: React.CSSProperties | ((style: ListStyle) => React.CSSProperties), direction: TransferDirection) => React.CSSProperties;
        separateDataSource(): {
            leftDataSource: KeyWise<RecordType>[];
            rightDataSource: KeyWise<RecordType>[];
        };
        renderTransfer: (transferLocale: TransferLocale) => JSX.Element;
        render(): JSX.Element;
    }
    export default Transfer;
}

declare module 'antd/node_modules/antd/lib/tree' {
    import Tree from 'antd/node_modules/antd/lib/tree/Tree';
    export { EventDataNode, DataNode } from 'rc-tree/lib/interface';
    export { TreeProps, AntTreeNode, AntTreeNodeMouseEvent, AntTreeNodeExpandedEvent, AntTreeNodeCheckedEvent, AntTreeNodeSelectedEvent, AntdTreeNodeAttribute, AntTreeNodeProps, } from 'antd/node_modules/antd/lib/tree/Tree';
    export { ExpandAction as DirectoryTreeExpandAction, DirectoryTreeProps } from 'antd/node_modules/antd/lib/tree/DirectoryTree';
    export default Tree;
}

declare module 'antd/node_modules/antd/lib/tree-select' {
    import * as React from 'react';
    import { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, TreeSelectProps as RcTreeSelectProps } from 'rc-tree-select';
    import { DefaultValueType } from 'rc-tree-select/lib/interface';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    type RawValue = string | number;
    export interface LabeledValue {
        key?: string;
        value: RawValue;
        label: React.ReactNode;
    }
    export type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[];
    export interface TreeSelectProps<T> extends Omit<RcTreeSelectProps<T>, 'showTreeIcon' | 'treeMotion' | 'inputIcon' | 'mode' | 'getInputElement' | 'backfill'> {
        suffixIcon?: React.ReactNode;
        size?: SizeType;
        bordered?: boolean;
    }
    export interface RefTreeSelectProps {
        focus: () => void;
        blur: () => void;
    }
    const TreeSelectRef: <T extends DefaultValueType>(props: TreeSelectProps<T> & {
        ref?: React.Ref<RefTreeSelectProps> | undefined;
    }) => React.ReactElement;
    type InternalTreeSelectType = typeof TreeSelectRef;
    interface TreeSelectInterface extends InternalTreeSelectType {
        TreeNode: typeof TreeNode;
        SHOW_ALL: typeof SHOW_ALL;
        SHOW_PARENT: typeof SHOW_PARENT;
        SHOW_CHILD: typeof SHOW_CHILD;
    }
    const TreeSelect: TreeSelectInterface;
    export { TreeNode };
    export default TreeSelect;
}

declare module 'antd/node_modules/antd/lib/tabs' {
    import * as React from 'react';
    import { TabsProps as RcTabsProps, TabPaneProps } from 'rc-tabs';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export type TabsType = 'line' | 'card' | 'editable-card';
    export type TabsPosition = 'top' | 'right' | 'bottom' | 'left';
    export { TabPaneProps };
    export interface TabsProps extends Omit<RcTabsProps, 'editable'> {
        type?: TabsType;
        size?: SizeType;
        hideAdd?: boolean;
        centered?: boolean;
        addIcon?: React.ReactNode;
        onEdit?: (e: React.MouseEvent | React.KeyboardEvent | string, action: 'add' | 'remove') => void;
    }
    function Tabs({ type, className, size: propSize, onEdit, hideAdd, centered, addIcon, ...props }: TabsProps): JSX.Element;
    namespace Tabs {
        var TabPane: typeof import("rc-tabs").TabPane;
    }
    export default Tabs;
}

declare module 'antd/node_modules/antd/lib/tag' {
    import * as React from 'react';
    import CheckableTag from 'antd/node_modules/antd/lib/tag/CheckableTag';
    import { PresetColorType, PresetStatusColorType } from 'antd/node_modules/antd/lib/_util/colors';
    import { LiteralUnion } from 'antd/node_modules/antd/lib/_util/type';
    export { CheckableTagProps } from 'antd/node_modules/antd/lib/tag/CheckableTag';
    export interface TagProps extends React.HTMLAttributes<HTMLSpanElement> {
        prefixCls?: string;
        className?: string;
        color?: LiteralUnion<PresetColorType | PresetStatusColorType, string>;
        closable?: boolean;
        closeIcon?: React.ReactNode;
        visible?: boolean;
        onClose?: (e: React.MouseEvent<HTMLElement>) => void;
        style?: React.CSSProperties;
        icon?: React.ReactNode;
    }
    export interface TagType extends React.ForwardRefExoticComponent<TagProps & React.RefAttributes<HTMLElement>> {
        CheckableTag: typeof CheckableTag;
    }
    const Tag: TagType;
    export default Tag;
}

declare module 'antd/node_modules/antd/lib/time-picker' {
    import { Moment } from 'moment';
    import * as React from 'react';
    import { PickerTimeProps, RangePickerTimeProps } from 'antd/node_modules/antd/lib/date-picker/generatePicker';
    import { Omit } from 'antd/node_modules/antd/lib/_util/type';
    export interface TimePickerLocale {
        placeholder?: string;
        rangePlaceholder?: [string, string];
    }
    export interface TimeRangePickerProps extends Omit<RangePickerTimeProps<Moment>, 'picker'> {
        popupClassName?: string;
    }
    const RangePicker: React.ForwardRefExoticComponent<TimeRangePickerProps & React.RefAttributes<any>>;
    export interface TimePickerProps extends Omit<PickerTimeProps<Moment>, 'picker'> {
        addon?: () => React.ReactNode;
        popupClassName?: string;
    }
    const TimePicker: React.ForwardRefExoticComponent<TimePickerProps & React.RefAttributes<any>>;
    type MergedTimePicker = typeof TimePicker & {
        RangePicker: typeof RangePicker;
    };
    const _default: MergedTimePicker;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/timeline' {
    import Timeline from 'antd/node_modules/antd/lib/timeline/Timeline';
    export { TimelineProps } from 'antd/node_modules/antd/lib/timeline/Timeline';
    export { TimelineItemProps } from 'antd/node_modules/antd/lib/timeline/TimelineItem';
    export default Timeline;
}

declare module 'antd/node_modules/antd/lib/tooltip' {
    import * as React from 'react';
    import { TooltipProps as RcTooltipProps } from 'rc-tooltip/lib/Tooltip';
    import { placements as Placements } from 'rc-tooltip/lib/placements';
    import { AdjustOverflow, PlacementsConfig } from 'antd/node_modules/antd/lib/tooltip/placements';
    import { PresetColorType } from 'antd/node_modules/antd/lib/_util/colors';
    import { LiteralUnion } from 'antd/node_modules/antd/lib/_util/type';
    export { AdjustOverflow, PlacementsConfig };
    export type TooltipPlacement = 'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
    export interface TooltipAlignConfig {
        points?: [string, string];
        offset?: [number | string, number | string];
        targetOffset?: [number | string, number | string];
        overflow?: {
            adjustX: boolean;
            adjustY: boolean;
        };
        useCssRight?: boolean;
        useCssBottom?: boolean;
        useCssTransform?: boolean;
    }
    export interface AbstractTooltipProps extends Partial<Omit<RcTooltipProps, 'children'>> {
        style?: React.CSSProperties;
        className?: string;
        color?: LiteralUnion<PresetColorType, string>;
        placement?: TooltipPlacement;
        builtinPlacements?: typeof Placements;
        openClassName?: string;
        arrowPointAtCenter?: boolean;
        autoAdjustOverflow?: boolean | AdjustOverflow;
        getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        children?: React.ReactNode;
    }
    export type RenderFunction = () => React.ReactNode;
    export interface TooltipPropsWithOverlay extends AbstractTooltipProps {
        title?: React.ReactNode | RenderFunction;
        overlay: React.ReactNode | RenderFunction;
    }
    export interface TooltipPropsWithTitle extends AbstractTooltipProps {
        title: React.ReactNode | RenderFunction;
        overlay?: React.ReactNode | RenderFunction;
    }
    export type TooltipProps = TooltipPropsWithTitle | TooltipPropsWithOverlay;
    const Tooltip: React.ForwardRefExoticComponent<TooltipProps & React.RefAttributes<unknown>>;
    export default Tooltip;
}

declare module 'antd/node_modules/antd/lib/typography' {
    import OriginTypography from 'antd/node_modules/antd/lib/typography/Typography';
    import Text from 'antd/node_modules/antd/lib/typography/Text';
    import Link from 'antd/node_modules/antd/lib/typography/Link';
    import Title from 'antd/node_modules/antd/lib/typography/Title';
    import Paragraph from 'antd/node_modules/antd/lib/typography/Paragraph';
    export type TypographyProps = typeof OriginTypography & {
        Text: typeof Text;
        Link: typeof Link;
        Title: typeof Title;
        Paragraph: typeof Paragraph;
    };
    const Typography: TypographyProps;
    export default Typography;
}

declare module 'antd/node_modules/antd/lib/upload' {
    import Upload from 'antd/node_modules/antd/lib/upload/Upload';
    export { UploadProps, UploadListProps, UploadChangeParam, RcFile } from 'antd/node_modules/antd/lib/upload/interface';
    export { DraggerProps } from 'antd/node_modules/antd/lib/upload/Dragger';
    export default Upload;
}

declare module 'antd/node_modules/antd/lib/version' {
    import version from 'antd/node_modules/antd/lib/version/version';
    export default version;
}

declare module 'antd/node_modules/antd/lib/anchor/Anchor' {
    import * as React from 'react';
    import AnchorLink from 'antd/node_modules/antd/lib/anchor/AnchorLink';
    import { ConfigConsumerProps } from 'antd/node_modules/antd/lib/config-provider';
    export type AnchorContainer = HTMLElement | Window;
    export interface AnchorProps {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        children?: React.ReactNode;
        offsetTop?: number;
        bounds?: number;
        affix?: boolean;
        showInkInFixed?: boolean;
        getContainer?: () => AnchorContainer;
        /** Return customize highlight anchor */
        getCurrentAnchor?: () => string;
        onClick?: (e: React.MouseEvent<HTMLElement>, link: {
            title: React.ReactNode;
            href: string;
        }) => void;
        /** Scroll to target offset value, if none, it's offsetTop prop value or 0. */
        targetOffset?: number;
        /** Listening event when scrolling change active link */
        onChange?: (currentActiveLink: string) => void;
    }
    export interface AnchorState {
        activeLink: null | string;
    }
    export interface AnchorDefaultProps extends AnchorProps {
        prefixCls: string;
        affix: boolean;
        showInkInFixed: boolean;
        getContainer: () => AnchorContainer;
    }
    export interface AntAnchor {
        registerLink: (link: string) => void;
        unregisterLink: (link: string) => void;
        activeLink: string | null;
        scrollTo: (link: string) => void;
        onClick?: (e: React.MouseEvent<HTMLElement>, link: {
            title: React.ReactNode;
            href: string;
        }) => void;
    }
    export default class Anchor extends React.Component<AnchorProps, AnchorState, ConfigConsumerProps> {
        static Link: typeof AnchorLink;
        static defaultProps: {
            affix: boolean;
            showInkInFixed: boolean;
        };
        static contextType: React.Context<ConfigConsumerProps>;
        state: {
            activeLink: null;
        };
        content: ConfigConsumerProps;
        registerLink: (link: string) => void;
        unregisterLink: (link: string) => void;
        getContainer: () => any;
        componentDidMount(): void;
        componentDidUpdate(): void;
        componentWillUnmount(): void;
        getCurrentAnchor(offsetTop?: number, bounds?: number): string;
        handleScrollTo: (link: string) => void;
        saveInkNode: (node: HTMLSpanElement) => void;
        setCurrentActiveLink: (link: string) => void;
        handleScroll: () => void;
        updateInk: () => void;
        render: () => JSX.Element;
    }
}

declare module 'antd/node_modules/antd/lib/anchor/AnchorLink' {
    import * as React from 'react';
    import { AntAnchor } from 'antd/node_modules/antd/lib/anchor/Anchor';
    import { ConfigConsumerProps } from 'antd/node_modules/antd/lib/config-provider';
    export interface AnchorLinkProps {
        prefixCls?: string;
        href: string;
        target?: string;
        title: React.ReactNode;
        children?: React.ReactNode;
        className?: string;
    }
    class AnchorLink extends React.Component<AnchorLinkProps, any, AntAnchor> {
        static defaultProps: {
            href: string;
        };
        static contextType: React.Context<AntAnchor>;
        context: AntAnchor;
        componentDidMount(): void;
        componentDidUpdate({ href: prevHref }: AnchorLinkProps): void;
        componentWillUnmount(): void;
        handleClick: (e: React.MouseEvent<HTMLElement>) => void;
        renderAnchorLink: ({ getPrefixCls }: ConfigConsumerProps) => JSX.Element;
        render(): JSX.Element;
    }
    export default AnchorLink;
}

declare module 'antd/node_modules/antd/lib/alert/ErrorBoundary' {
    import * as React from 'react';
    interface ErrorBoundaryProps {
        message?: React.ReactNode;
        description?: React.ReactNode;
    }
    export default class ErrorBoundary extends React.Component<ErrorBoundaryProps, {
        error?: Error | null;
        info: {
            componentStack?: string;
        };
    }> {
        state: {
            error: undefined;
            info: {
                componentStack: string;
            };
        };
        componentDidCatch(error: Error | null, info: object): void;
        render(): React.ReactNode;
    }
    export {};
}

declare module 'antd/node_modules/antd/lib/avatar/avatar' {
    import * as React from 'react';
    import { AvatarSize } from 'antd/node_modules/antd/lib/avatar/SizeContext';
    export interface AvatarProps {
        /** Shape of avatar, options: `circle`, `square` */
        shape?: 'circle' | 'square';
        size?: AvatarSize;
        gap?: number;
        /** Src of image avatar */
        src?: React.ReactNode;
        /** Srcset of image avatar */
        srcSet?: string;
        draggable?: boolean;
        /** Icon to be used in avatar */
        icon?: React.ReactNode;
        style?: React.CSSProperties;
        prefixCls?: string;
        className?: string;
        children?: React.ReactNode;
        alt?: string;
        onError?: () => boolean;
    }
    const Avatar: React.ForwardRefExoticComponent<AvatarProps & React.RefAttributes<unknown>>;
    export default Avatar;
}

declare module 'antd/node_modules/antd/lib/avatar/group' {
    import * as React from 'react';
    import { AvatarSize } from 'antd/node_modules/antd/lib/avatar/SizeContext';
    export interface GroupProps {
        className?: string;
        children?: React.ReactNode;
        style?: React.CSSProperties;
        prefixCls?: string;
        maxCount?: number;
        maxStyle?: React.CSSProperties;
        maxPopoverPlacement?: 'top' | 'bottom';
        size?: AvatarSize;
    }
    const Group: React.FC<GroupProps>;
    export default Group;
}

declare module 'antd/node_modules/antd/lib/badge/Ribbon' {
    import * as React from 'react';
    import { LiteralUnion } from 'antd/node_modules/antd/lib/_util/type';
    import { PresetColorType } from 'antd/node_modules/antd/lib/_util/colors';
    type RibbonPlacement = 'start' | 'end';
    export interface RibbonProps {
        className?: string;
        prefixCls?: string;
        style?: React.CSSProperties;
        text?: React.ReactNode;
        color?: LiteralUnion<PresetColorType, string>;
        children?: React.ReactNode;
        placement?: RibbonPlacement;
    }
    const Ribbon: React.FC<RibbonProps>;
    export default Ribbon;
}

declare module 'antd/node_modules/antd/lib/_util/colors' {
    import { ElementOf } from 'antd/node_modules/antd/lib/_util/type';
    export const PresetStatusColorTypes: ["success", "processing", "error", "default", "warning"];
    export const PresetColorTypes: ["pink", "red", "yellow", "orange", "cyan", "green", "blue", "purple", "geekblue", "magenta", "volcano", "gold", "lime"];
    export type PresetColorType = ElementOf<typeof PresetColorTypes>;
    export type PresetStatusColorType = ElementOf<typeof PresetStatusColorTypes>;
}

declare module 'antd/node_modules/antd/lib/_util/type' {
    export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
    export const tuple: <T extends string[]>(...args: T) => T;
    export const tupleNum: <T extends number[]>(...args: T) => T;
    /**
      * https://stackoverflow.com/a/59187769 Extract the type of an element of an array/tuple without
      * performing indexing
      */
    export type ElementOf<T> = T extends (infer E)[] ? E : T extends readonly (infer F)[] ? F : never;
    /** https://github.com/Microsoft/TypeScript/issues/29729 */
    export type LiteralUnion<T extends U, U> = T | (U & {});
}

declare module 'antd/node_modules/antd/lib/badge/ScrollNumber' {
    import * as React from 'react';
    export interface ScrollNumberProps {
        prefixCls?: string;
        className?: string;
        motionClassName?: string;
        count?: string | number | null;
        children?: React.ReactElement<HTMLElement>;
        component?: string;
        style?: React.CSSProperties;
        title?: string | number | null;
        show: boolean;
    }
    export interface ScrollNumberState {
        animateStarted?: boolean;
        count?: string | number | null;
    }
    const ScrollNumber: React.FC<ScrollNumberProps>;
    export default ScrollNumber;
}

declare module 'antd/node_modules/antd/lib/breadcrumb/Breadcrumb' {
    import * as React from 'react';
    import BreadcrumbItem from 'antd/node_modules/antd/lib/breadcrumb/BreadcrumbItem';
    import BreadcrumbSeparator from 'antd/node_modules/antd/lib/breadcrumb/BreadcrumbSeparator';
    import { Omit } from 'antd/node_modules/antd/lib/_util/type';
    export interface Route {
        path: string;
        breadcrumbName: string;
        children?: Omit<Route, 'children'>[];
    }
    export interface BreadcrumbProps {
        prefixCls?: string;
        routes?: Route[];
        params?: any;
        separator?: React.ReactNode;
        itemRender?: (route: Route, params: any, routes: Array<Route>, paths: Array<string>) => React.ReactNode;
        style?: React.CSSProperties;
        className?: string;
    }
    interface BreadcrumbInterface extends React.FC<BreadcrumbProps> {
        Item: typeof BreadcrumbItem;
        Separator: typeof BreadcrumbSeparator;
    }
    const Breadcrumb: BreadcrumbInterface;
    export default Breadcrumb;
}

declare module 'antd/node_modules/antd/lib/breadcrumb/BreadcrumbItem' {
    import * as React from 'react';
    import { DropDownProps } from 'antd/node_modules/antd/lib/dropdown/dropdown';
    export interface BreadcrumbItemProps {
        prefixCls?: string;
        separator?: React.ReactNode;
        href?: string;
        overlay?: DropDownProps['overlay'];
        dropdownProps?: DropDownProps;
        onClick?: React.MouseEventHandler<HTMLAnchorElement | HTMLSpanElement>;
        className?: string;
    }
    interface BreadcrumbItemInterface extends React.FC<BreadcrumbItemProps> {
        __ANT_BREADCRUMB_ITEM: boolean;
    }
    const BreadcrumbItem: BreadcrumbItemInterface;
    export default BreadcrumbItem;
}

declare module 'antd/node_modules/antd/lib/button/button' {
    import * as React from 'react';
    import Group from 'antd/node_modules/antd/lib/button/button-group';
    import { Omit } from 'antd/node_modules/antd/lib/_util/type';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    const ButtonTypes: ["default", "primary", "ghost", "dashed", "link", "text"];
    export type ButtonType = typeof ButtonTypes[number];
    const ButtonShapes: ["circle", "round"];
    export type ButtonShape = typeof ButtonShapes[number];
    const ButtonHTMLTypes: ["submit", "button", "reset"];
    export type ButtonHTMLType = typeof ButtonHTMLTypes[number];
    export type LegacyButtonType = ButtonType | 'danger';
    export function convertLegacyProps(type?: LegacyButtonType): ButtonProps;
    export interface BaseButtonProps {
        type?: ButtonType;
        icon?: React.ReactNode;
        shape?: ButtonShape;
        size?: SizeType;
        loading?: boolean | {
            delay?: number;
        };
        prefixCls?: string;
        className?: string;
        ghost?: boolean;
        danger?: boolean;
        block?: boolean;
        children?: React.ReactNode;
    }
    export type AnchorButtonProps = {
        href: string;
        target?: string;
        onClick?: React.MouseEventHandler<HTMLElement>;
    } & BaseButtonProps & Omit<React.AnchorHTMLAttributes<any>, 'type' | 'onClick'>;
    export type NativeButtonProps = {
        htmlType?: ButtonHTMLType;
        onClick?: React.MouseEventHandler<HTMLElement>;
    } & BaseButtonProps & Omit<React.ButtonHTMLAttributes<any>, 'type' | 'onClick'>;
    export type ButtonProps = Partial<AnchorButtonProps & NativeButtonProps>;
    interface CompoundedComponent extends React.ForwardRefExoticComponent<ButtonProps & React.RefAttributes<HTMLElement>> {
        Group: typeof Group;
        __ANT_BUTTON: boolean;
    }
    const Button: CompoundedComponent;
    export default Button;
}

declare module 'antd/node_modules/antd/lib/button/button-group' {
    import * as React from 'react';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export interface ButtonGroupProps {
        size?: SizeType;
        style?: React.CSSProperties;
        className?: string;
        prefixCls?: string;
    }
    const ButtonGroup: React.FC<ButtonGroupProps>;
    export default ButtonGroup;
}

declare module 'antd/node_modules/antd/lib/config-provider/SizeContext' {
    import * as React from 'react';
    export type SizeType = 'small' | 'middle' | 'large' | undefined;
    const SizeContext: React.Context<SizeType>;
    export interface SizeContextProps {
        size?: SizeType;
    }
    export const SizeContextProvider: React.FC<SizeContextProps>;
    export default SizeContext;
}

declare module 'antd/node_modules/antd/lib/calendar/generateCalendar' {
    import * as React from 'react';
    import { GenerateConfig } from 'rc-picker/lib/generate';
    import { PickerPanelBaseProps as RCPickerPanelBaseProps, PickerPanelDateProps as RCPickerPanelDateProps, PickerPanelTimeProps as RCPickerPanelTimeProps } from 'rc-picker/lib/PickerPanel';
    import enUS from 'antd/node_modules/antd/lib/calendar/locale/en_US';
    type InjectDefaultProps<Props> = Omit<Props, 'locale' | 'generateConfig' | 'prevIcon' | 'nextIcon' | 'superPrevIcon' | 'superNextIcon'> & {
        locale?: typeof enUS;
        size?: 'large' | 'default' | 'small';
    };
    export type PickerPanelBaseProps<DateType> = InjectDefaultProps<RCPickerPanelBaseProps<DateType>>;
    export type PickerPanelDateProps<DateType> = InjectDefaultProps<RCPickerPanelDateProps<DateType>>;
    export type PickerPanelTimeProps<DateType> = InjectDefaultProps<RCPickerPanelTimeProps<DateType>>;
    export type PickerProps<DateType> = PickerPanelBaseProps<DateType> | PickerPanelDateProps<DateType> | PickerPanelTimeProps<DateType>;
    export type CalendarMode = 'year' | 'month';
    export type HeaderRender<DateType> = (config: {
        value: DateType;
        type: CalendarMode;
        onChange: (date: DateType) => void;
        onTypeChange: (type: CalendarMode) => void;
    }) => React.ReactNode;
    export interface CalendarProps<DateType> {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        locale?: typeof enUS;
        validRange?: [DateType, DateType];
        disabledDate?: (date: DateType) => boolean;
        dateFullCellRender?: (date: DateType) => React.ReactNode;
        dateCellRender?: (date: DateType) => React.ReactNode;
        monthFullCellRender?: (date: DateType) => React.ReactNode;
        monthCellRender?: (date: DateType) => React.ReactNode;
        headerRender?: HeaderRender<DateType>;
        value?: DateType;
        defaultValue?: DateType;
        mode?: CalendarMode;
        fullscreen?: boolean;
        onChange?: (date: DateType) => void;
        onPanelChange?: (date: DateType, mode: CalendarMode) => void;
        onSelect?: (date: DateType) => void;
    }
    function generateCalendar<DateType>(generateConfig: GenerateConfig<DateType>): (props: CalendarProps<DateType>) => JSX.Element;
    export default generateCalendar;
}

declare module 'antd/node_modules/antd/lib/card/Grid' {
    import * as React from 'react';
    export interface CardGridProps {
        prefixCls?: string;
        className?: string;
        hoverable?: boolean;
        style?: React.CSSProperties;
    }
    const Grid: React.FC<CardGridProps>;
    export default Grid;
}

declare module 'antd/node_modules/antd/lib/card/Meta' {
    import * as React from 'react';
    export interface CardMetaProps {
        prefixCls?: string;
        style?: React.CSSProperties;
        className?: string;
        avatar?: React.ReactNode;
        title?: React.ReactNode;
        description?: React.ReactNode;
    }
    const Meta: React.FC<CardMetaProps>;
    export default Meta;
}

declare module 'antd/node_modules/antd/lib/collapse/Collapse' {
    import * as React from 'react';
    import CollapsePanel, { CollapsibleType } from 'antd/node_modules/antd/lib/collapse/CollapsePanel';
    export type ExpandIconPosition = 'left' | 'right' | undefined;
    export interface CollapseProps {
        activeKey?: Array<string | number> | string | number;
        defaultActiveKey?: Array<string | number> | string | number;
        /** 手风琴效果 */
        accordion?: boolean;
        destroyInactivePanel?: boolean;
        onChange?: (key: string | string[]) => void;
        style?: React.CSSProperties;
        className?: string;
        bordered?: boolean;
        prefixCls?: string;
        expandIcon?: (panelProps: PanelProps) => React.ReactNode;
        expandIconPosition?: ExpandIconPosition;
        ghost?: boolean;
        collapsible?: CollapsibleType;
    }
    interface PanelProps {
        isActive?: boolean;
        header?: React.ReactNode;
        className?: string;
        style?: React.CSSProperties;
        showArrow?: boolean;
        forceRender?: boolean;
        /** @deprecated Use `collapsible="disabled"` instead */
        disabled?: boolean;
        extra?: React.ReactNode;
        collapsible?: CollapsibleType;
    }
    interface CollapseInterface extends React.FC<CollapseProps> {
        Panel: typeof CollapsePanel;
    }
    const Collapse: CollapseInterface;
    export default Collapse;
}

declare module 'antd/node_modules/antd/lib/collapse/CollapsePanel' {
    import * as React from 'react';
    export type CollapsibleType = 'header' | 'disabled';
    export interface CollapsePanelProps {
        key: string | number;
        header: React.ReactNode;
        /** @deprecated Use `collapsible="disabled"` instead */
        disabled?: boolean;
        className?: string;
        style?: React.CSSProperties;
        showArrow?: boolean;
        prefixCls?: string;
        forceRender?: boolean;
        id?: string;
        extra?: React.ReactNode;
        collapsible?: CollapsibleType;
    }
    const CollapsePanel: React.FC<CollapsePanelProps>;
    export default CollapsePanel;
}

declare module 'antd/node_modules/antd/lib/checkbox/Checkbox' {
    import * as React from 'react';
    export interface AbstractCheckboxProps<T> {
        prefixCls?: string;
        className?: string;
        defaultChecked?: boolean;
        checked?: boolean;
        style?: React.CSSProperties;
        disabled?: boolean;
        onChange?: (e: T) => void;
        onClick?: React.MouseEventHandler<HTMLElement>;
        onMouseEnter?: React.MouseEventHandler<HTMLElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLElement>;
        onKeyPress?: React.KeyboardEventHandler<HTMLElement>;
        onKeyDown?: React.KeyboardEventHandler<HTMLElement>;
        value?: any;
        tabIndex?: number;
        name?: string;
        children?: React.ReactNode;
        id?: string;
        autoFocus?: boolean;
        type?: string;
        skipGroup?: boolean;
    }
    export interface CheckboxChangeEventTarget extends CheckboxProps {
        checked: boolean;
    }
    export interface CheckboxChangeEvent {
        target: CheckboxChangeEventTarget;
        stopPropagation: () => void;
        preventDefault: () => void;
        nativeEvent: MouseEvent;
    }
    export interface CheckboxProps extends AbstractCheckboxProps<CheckboxChangeEvent> {
        indeterminate?: boolean;
    }
    const Checkbox: React.ForwardRefExoticComponent<CheckboxProps & React.RefAttributes<unknown>>;
    export default Checkbox;
}

declare module 'antd/node_modules/antd/lib/checkbox/Group' {
    import * as React from 'react';
    import { CheckboxChangeEvent } from 'antd/node_modules/antd/lib/checkbox/Checkbox';
    export type CheckboxValueType = string | number | boolean;
    export interface CheckboxOptionType {
        label: React.ReactNode;
        value: CheckboxValueType;
        style?: React.CSSProperties;
        disabled?: boolean;
        onChange?: (e: CheckboxChangeEvent) => void;
    }
    export interface AbstractCheckboxGroupProps {
        prefixCls?: string;
        className?: string;
        options?: Array<CheckboxOptionType | string>;
        disabled?: boolean;
        style?: React.CSSProperties;
    }
    export interface CheckboxGroupProps extends AbstractCheckboxGroupProps {
        name?: string;
        defaultValue?: Array<CheckboxValueType>;
        value?: Array<CheckboxValueType>;
        onChange?: (checkedValue: Array<CheckboxValueType>) => void;
        children?: React.ReactNode;
    }
    export interface CheckboxGroupContext {
        name?: string;
        toggleOption?: (option: CheckboxOptionType) => void;
        value?: any;
        disabled?: boolean;
        registerValue: (val: string) => void;
        cancelValue: (val: string) => void;
    }
    export const GroupContext: React.Context<CheckboxGroupContext | null>;
    const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<CheckboxGroupProps & React.RefAttributes<HTMLDivElement>>>;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/config-provider/renderEmpty' {
    import * as React from 'react';
    const renderEmpty: (componentName?: string | undefined) => React.ReactNode;
    export type RenderEmptyHandler = typeof renderEmpty;
    export default renderEmpty;
}

declare module 'antd/node_modules/antd/lib/locale-provider' {
    import * as React from 'react';
    import { ValidateMessages } from 'rc-field-form/lib/interface';
    import { ModalLocale } from 'antd/node_modules/antd/lib/modal/locale';
    import { TransferLocale as TransferLocaleForEmpty } from 'antd/node_modules/antd/lib/empty';
    import { PaginationLocale } from 'antd/node_modules/antd/lib/pagination/Pagination';
    import { TableLocale } from 'antd/node_modules/antd/lib/table/interface';
    import { PopconfirmLocale } from 'antd/node_modules/antd/lib/popconfirm';
    import { UploadLocale } from 'antd/node_modules/antd/lib/upload/interface';
    import { TransferLocale } from 'antd/node_modules/antd/lib/transfer';
    import { PickerLocale as DatePickerLocale } from 'antd/node_modules/antd/lib/date-picker/generatePicker';
    export const ANT_MARK = "internalMark";
    export interface Locale {
        locale: string;
        Pagination?: PaginationLocale;
        DatePicker?: DatePickerLocale;
        TimePicker?: Record<string, any>;
        Calendar?: Record<string, any>;
        Table?: TableLocale;
        Modal?: ModalLocale;
        Popconfirm?: PopconfirmLocale;
        Transfer?: Partial<TransferLocale>;
        Select?: Record<string, any>;
        Upload?: UploadLocale;
        Empty?: TransferLocaleForEmpty;
        global?: Record<string, any>;
        PageHeader?: {
            back: string;
        };
        Icon?: Record<string, any>;
        Text?: Record<string, any>;
        Form?: {
            optional?: string;
            defaultValidateMessages: ValidateMessages;
        };
        Image?: {
            preview: string;
        };
    }
    export interface LocaleProviderProps {
        locale: Locale;
        children?: React.ReactNode;
        _ANT_MARK__?: string;
    }
    export default class LocaleProvider extends React.Component<LocaleProviderProps, any> {
        static defaultProps: {
            locale: {};
        };
        constructor(props: LocaleProviderProps);
        componentDidMount(): void;
        componentDidUpdate(prevProps: LocaleProviderProps): void;
        componentWillUnmount(): void;
        render(): JSX.Element;
    }
}

declare module 'antd/node_modules/antd/lib/config-provider/context' {
    import * as React from 'react';
    import { RenderEmptyHandler } from 'antd/node_modules/antd/lib/config-provider/renderEmpty';
    import { Locale } from 'antd/node_modules/antd/lib/locale-provider';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    import { RequiredMark } from 'antd/node_modules/antd/lib/form/Form';
    export interface CSPConfig {
        nonce?: string;
    }
    export type DirectionType = 'ltr' | 'rtl' | undefined;
    export interface ConfigConsumerProps {
        getTargetContainer?: () => HTMLElement;
        getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        rootPrefixCls?: string;
        iconPrefixCls?: string;
        getPrefixCls: (suffixCls?: string, customizePrefixCls?: string) => string;
        renderEmpty: RenderEmptyHandler;
        csp?: CSPConfig;
        autoInsertSpaceInButton?: boolean;
        input?: {
            autoComplete?: string;
        };
        locale?: Locale;
        pageHeader?: {
            ghost: boolean;
        };
        direction?: DirectionType;
        space?: {
            size?: SizeType | number;
        };
        virtual?: boolean;
        dropdownMatchSelectWidth?: boolean;
        form?: {
            requiredMark?: RequiredMark;
        };
    }
    export const ConfigContext: React.Context<ConfigConsumerProps>;
    export const ConfigConsumer: React.Consumer<ConfigConsumerProps>;
    type IReactComponent<P = any> = React.FC<P> | React.ComponentClass<P> | React.ClassicComponentClass<P>;
    interface BasicExportProps {
        prefixCls?: string;
    }
    interface ConsumerConfig {
        prefixCls: string;
    }
    /** @deprecated Use hooks instead. This is a legacy function */
    export function withConfigConsumer<ExportProps extends BasicExportProps>(config: ConsumerConfig): <ComponentDef>(Component: IReactComponent) => React.FC<ExportProps> & ComponentDef;
    export {};
}

declare module 'antd/node_modules/antd/lib/form/Form' {
    import * as React from 'react';
    import { List } from 'rc-field-form';
    import { FormProps as RcFormProps } from 'rc-field-form/lib/Form';
    import { Options } from 'scroll-into-view-if-needed';
    import { ColProps } from 'antd/node_modules/antd/lib/grid/col';
    import { FormLabelAlign } from 'antd/node_modules/antd/lib/form/interface';
    import useForm, { FormInstance } from 'antd/node_modules/antd/lib/form/hooks/useForm';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export type RequiredMark = boolean | 'optional';
    export type FormLayout = 'horizontal' | 'inline' | 'vertical';
    export interface FormProps<Values = any> extends Omit<RcFormProps<Values>, 'form'> {
        prefixCls?: string;
        colon?: boolean;
        name?: string;
        layout?: FormLayout;
        labelAlign?: FormLabelAlign;
        labelCol?: ColProps;
        wrapperCol?: ColProps;
        form?: FormInstance<Values>;
        size?: SizeType;
        scrollToFirstError?: Options | boolean;
        requiredMark?: RequiredMark;
        /** @deprecated Will warning in future branch. Pls use `requiredMark` instead. */
        hideRequiredMark?: boolean;
    }
    const Form: <Values = any>(props: FormProps<Values> & {
        children?: React.ReactNode;
    } & {
        ref?: React.Ref<FormInstance<Values>> | undefined;
    }) => React.ReactElement;
    export { useForm, List, FormInstance };
    export default Form;
}

declare module 'antd/node_modules/antd/lib/date-picker/generatePicker' {
    import * as React from 'react';
    import { GenerateConfig } from 'rc-picker/lib/generate/index';
    import { PickerBaseProps as RCPickerBaseProps, PickerDateProps as RCPickerDateProps, PickerTimeProps as RCPickerTimeProps } from 'rc-picker/lib/Picker';
    import { SharedTimeProps } from 'rc-picker/lib/panels/TimePanel';
    import { RangePickerBaseProps as RCRangePickerBaseProps, RangePickerDateProps as RCRangePickerDateProps, RangePickerTimeProps as RCRangePickerTimeProps } from 'rc-picker/lib/RangePicker';
    import { PickerMode, Locale as RcPickerLocale } from 'rc-picker/lib/interface';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    import PickerButton from 'antd/node_modules/antd/lib/date-picker/PickerButton';
    import PickerTag from 'antd/node_modules/antd/lib/date-picker/PickerTag';
    import { TimePickerLocale } from 'antd/node_modules/antd/lib/time-picker';
    export const Components: {
        button: typeof PickerButton;
        rangeItem: typeof PickerTag;
    };
    export function getTimeProps<DateType>(props: {
        format?: string;
        picker?: PickerMode;
    } & SharedTimeProps<DateType>): SharedTimeProps<DateType> | {
        showTime: SharedTimeProps<DateType>;
    };
    type InjectDefaultProps<Props> = Omit<Props, 'locale' | 'generateConfig' | 'prevIcon' | 'nextIcon' | 'superPrevIcon' | 'superNextIcon' | 'hideHeader' | 'components'> & {
        locale?: PickerLocale;
        size?: SizeType;
        bordered?: boolean;
    };
    export type PickerLocale = {
        lang: RcPickerLocale & AdditionalPickerLocaleLangProps;
        timePickerLocale: TimePickerLocale;
    } & AdditionalPickerLocaleProps;
    export type AdditionalPickerLocaleProps = {
        dateFormat?: string;
        dateTimeFormat?: string;
        weekFormat?: string;
        monthFormat?: string;
    };
    export type AdditionalPickerLocaleLangProps = {
        placeholder: string;
        yearPlaceholder?: string;
        quarterPlaceholder?: string;
        monthPlaceholder?: string;
        weekPlaceholder?: string;
        rangeYearPlaceholder?: [string, string];
        rangeMonthPlaceholder?: [string, string];
        rangeWeekPlaceholder?: [string, string];
        rangePlaceholder?: [string, string];
    };
    export type PickerBaseProps<DateType> = InjectDefaultProps<RCPickerBaseProps<DateType>>;
    export type PickerDateProps<DateType> = InjectDefaultProps<RCPickerDateProps<DateType>>;
    export type PickerTimeProps<DateType> = InjectDefaultProps<RCPickerTimeProps<DateType>>;
    export type PickerProps<DateType> = PickerBaseProps<DateType> | PickerDateProps<DateType> | PickerTimeProps<DateType>;
    export type RangePickerBaseProps<DateType> = InjectDefaultProps<RCRangePickerBaseProps<DateType>>;
    export type RangePickerDateProps<DateType> = InjectDefaultProps<RCRangePickerDateProps<DateType>>;
    export type RangePickerTimeProps<DateType> = InjectDefaultProps<RCRangePickerTimeProps<DateType>>;
    export type RangePickerProps<DateType> = RangePickerBaseProps<DateType> | RangePickerDateProps<DateType> | RangePickerTimeProps<DateType>;
    function generatePicker<DateType>(generateConfig: GenerateConfig<DateType>): React.ComponentClass<PickerProps<DateType>, any> & {
        WeekPicker: React.ComponentClass<Omit<PickerDateProps<DateType>, "picker">, any>;
        MonthPicker: React.ComponentClass<Omit<PickerDateProps<DateType>, "picker">, any>;
        YearPicker: React.ComponentClass<Omit<PickerDateProps<DateType>, "picker">, any>;
        RangePicker: React.ComponentClass<RangePickerProps<DateType>>;
        TimePicker: React.ComponentClass<Omit<PickerTimeProps<DateType>, "picker">, any>;
        QuarterPicker: React.ComponentClass<Omit<PickerTimeProps<DateType>, "picker">, any>;
    };
    export default generatePicker;
}

declare module 'antd/node_modules/antd/lib/_util/responsiveObserve' {
    export type Breakpoint = 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
    export type BreakpointMap = Record<Breakpoint, string>;
    export type ScreenMap = Partial<Record<Breakpoint, boolean>>;
    export type ScreenSizeMap = Partial<Record<Breakpoint, number>>;
    export const responsiveArray: Breakpoint[];
    export const responsiveMap: BreakpointMap;
    type SubscribeFunc = (screens: ScreenMap) => void;
    const responsiveObserve: {
        matchHandlers: {
            [prop: string]: {
                mql: MediaQueryList;
                listener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;
            };
        };
        dispatch(pointMap: ScreenMap): boolean;
        subscribe(func: SubscribeFunc): number;
        unsubscribe(token: number): void;
        unregister(): void;
        register(): void;
    };
    export default responsiveObserve;
}

declare module 'antd/node_modules/antd/lib/dropdown/dropdown' {
    import * as React from 'react';
    import DropdownButton from 'antd/node_modules/antd/lib/dropdown/dropdown-button';
    const Placements: ["topLeft", "topCenter", "topRight", "bottomLeft", "bottomCenter", "bottomRight"];
    type Placement = typeof Placements[number];
    type OverlayFunc = () => React.ReactElement;
    type Align = {
        points?: [string, string];
        offset?: [number, number];
        targetOffset?: [number, number];
        overflow?: {
            adjustX?: boolean;
            adjustY?: boolean;
        };
        useCssRight?: boolean;
        useCssBottom?: boolean;
        useCssTransform?: boolean;
    };
    export interface DropDownProps {
        arrow?: boolean;
        trigger?: ('click' | 'hover' | 'contextMenu')[];
        overlay: React.ReactElement | OverlayFunc;
        onVisibleChange?: (visible: boolean) => void;
        visible?: boolean;
        disabled?: boolean;
        align?: Align;
        getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;
        prefixCls?: string;
        className?: string;
        transitionName?: string;
        placement?: Placement;
        overlayClassName?: string;
        overlayStyle?: React.CSSProperties;
        forceRender?: boolean;
        mouseEnterDelay?: number;
        mouseLeaveDelay?: number;
        openClassName?: string;
    }
    interface DropdownInterface extends React.FC<DropDownProps> {
        Button: typeof DropdownButton;
    }
    const Dropdown: DropdownInterface;
    export default Dropdown;
}

declare module 'antd/node_modules/antd/lib/dropdown/dropdown-button' {
    import * as React from 'react';
    import { ButtonHTMLType } from 'antd/node_modules/antd/lib/button/button';
    import { ButtonGroupProps } from 'antd/node_modules/antd/lib/button/button-group';
    import { DropDownProps } from 'antd/node_modules/antd/lib/dropdown/dropdown';
    type DropdownButtonType = 'primary' | 'ghost' | 'dashed';
    export interface DropdownButtonProps extends ButtonGroupProps, DropDownProps {
        type?: DropdownButtonType;
        htmlType?: ButtonHTMLType;
        disabled?: boolean;
        onClick?: React.MouseEventHandler<HTMLButtonElement>;
        icon?: React.ReactNode;
        href?: string;
        children?: React.ReactNode;
        title?: string;
        buttonsRender?: (buttons: React.ReactNode[]) => React.ReactNode[];
    }
    interface DropdownButtonInterface extends React.FC<DropdownButtonProps> {
        __ANT_BUTTON: boolean;
    }
    const DropdownButton: DropdownButtonInterface;
    export default DropdownButton;
}

declare module 'antd/node_modules/antd/lib/form/FormItem' {
    import * as React from 'react';
    import { FormInstance } from 'rc-field-form';
    import { FieldProps } from 'rc-field-form/lib/Field';
    import { FormItemLabelProps, LabelTooltipType } from 'antd/node_modules/antd/lib/form/FormItemLabel';
    import { FormItemInputProps } from 'antd/node_modules/antd/lib/form/FormItemInput';
    const ValidateStatuses: ["success", "warning", "error", "validating", ""];
    export type ValidateStatus = typeof ValidateStatuses[number];
    type RenderChildren<Values = any> = (form: FormInstance<Values>) => React.ReactNode;
    type RcFieldProps<Values = any> = Omit<FieldProps<Values>, 'children'>;
    type ChildrenType<Values = any> = RenderChildren<Values> | React.ReactNode;
    export interface FormItemProps<Values = any> extends FormItemLabelProps, FormItemInputProps, RcFieldProps<Values> {
        prefixCls?: string;
        noStyle?: boolean;
        style?: React.CSSProperties;
        className?: string;
        children?: ChildrenType<Values>;
        id?: string;
        hasFeedback?: boolean;
        validateStatus?: ValidateStatus;
        required?: boolean;
        hidden?: boolean;
        initialValue?: any;
        messageVariables?: Record<string, string>;
        tooltip?: LabelTooltipType;
        /** Auto passed by List render props. User should not use this. */
        fieldKey?: React.Key | React.Key[];
    }
    function FormItem<Values = any>(props: FormItemProps<Values>): React.ReactElement;
    export default FormItem;
}

declare module 'antd/node_modules/antd/lib/form/ErrorList' {
    import * as React from 'react';
    export interface ErrorListProps {
        errors?: React.ReactNode[];
        /** @private Internal Usage. Do not use in your production */
        help?: React.ReactNode;
        /** @private Internal Usage. Do not use in your production */
        onDomErrorVisibleChange?: (visible: boolean) => void;
    }
    export default function ErrorList({ errors, help, onDomErrorVisibleChange, }: ErrorListProps): JSX.Element;
}

declare module 'antd/node_modules/antd/lib/form/FormList' {
    import * as React from 'react';
    import { ValidatorRule, StoreValue } from 'rc-field-form/lib/interface';
    export interface FormListFieldData {
        name: number;
        key: number;
        fieldKey: number;
    }
    export interface FormListOperation {
        add: (defaultValue?: StoreValue, insertIndex?: number) => void;
        remove: (index: number | number[]) => void;
        move: (from: number, to: number) => void;
    }
    export interface FormListProps {
        prefixCls?: string;
        name: string | number | (string | number)[];
        rules?: ValidatorRule[];
        initialValue?: any[];
        children: (fields: FormListFieldData[], operation: FormListOperation, meta: {
            errors: React.ReactNode[];
        }) => React.ReactNode;
    }
    const FormList: React.FC<FormListProps>;
    export default FormList;
}

declare module 'antd/node_modules/antd/lib/form/context' {
    import * as React from 'react';
    import { FormProviderProps as RcFormProviderProps } from 'rc-field-form/lib/FormContext';
    import { ColProps } from 'antd/node_modules/antd/lib/grid/col';
    import { FormLabelAlign } from 'antd/node_modules/antd/lib/form/interface';
    import { RequiredMark } from 'antd/node_modules/antd/lib/form/Form';
    import { ValidateStatus } from 'antd/node_modules/antd/lib/form/FormItem';
    /** Form Context. Set top form style and pass to Form Item usage. */
    export interface FormContextProps {
        vertical: boolean;
        name?: string;
        colon?: boolean;
        labelAlign?: FormLabelAlign;
        labelCol?: ColProps;
        wrapperCol?: ColProps;
        requiredMark?: RequiredMark;
        itemRef: (name: (string | number)[]) => (node: React.ReactElement) => void;
    }
    export const FormContext: React.Context<FormContextProps>;
    /** Form Item Context. Used for Form noStyle Item error collection */
    export interface FormItemContextProps {
        updateItemErrors: (name: string, errors: string[], originName?: string) => void;
    }
    export const FormItemContext: React.Context<FormItemContextProps>;
    /** Form Provider */
    export interface FormProviderProps extends Omit<RcFormProviderProps, 'validateMessages'> {
        prefixCls?: string;
    }
    export const FormProvider: React.FC<FormProviderProps>;
    /** Used for ErrorList only */
    export interface FormItemPrefixContextProps {
        prefixCls: string;
        status?: ValidateStatus;
    }
    export const FormItemPrefixContext: React.Context<FormItemPrefixContextProps>;
}

declare module 'antd/node_modules/antd/lib/grid/row' {
    import * as React from 'react';
    import { Breakpoint } from 'antd/node_modules/antd/lib/_util/responsiveObserve';
    const RowAligns: ["top", "middle", "bottom", "stretch"];
    const RowJustify: ["start", "end", "center", "space-around", "space-between"];
    export type Gutter = number | Partial<Record<Breakpoint, number>>;
    export interface RowProps extends React.HTMLAttributes<HTMLDivElement> {
        gutter?: Gutter | [Gutter, Gutter];
        align?: typeof RowAligns[number];
        justify?: typeof RowJustify[number];
        prefixCls?: string;
        wrap?: boolean;
    }
    const Row: React.ForwardRefExoticComponent<RowProps & React.RefAttributes<HTMLDivElement>>;
    export default Row;
}

declare module 'antd/node_modules/antd/lib/grid/col' {
    import * as React from 'react';
    type ColSpanType = number | string;
    type FlexType = number | 'none' | 'auto' | string;
    export interface ColSize {
        flex?: FlexType;
        span?: ColSpanType;
        order?: ColSpanType;
        offset?: ColSpanType;
        push?: ColSpanType;
        pull?: ColSpanType;
    }
    export interface ColProps extends React.HTMLAttributes<HTMLDivElement> {
        flex?: FlexType;
        span?: ColSpanType;
        order?: ColSpanType;
        offset?: ColSpanType;
        push?: ColSpanType;
        pull?: ColSpanType;
        xs?: ColSpanType | ColSize;
        sm?: ColSpanType | ColSize;
        md?: ColSpanType | ColSize;
        lg?: ColSpanType | ColSize;
        xl?: ColSpanType | ColSize;
        xxl?: ColSpanType | ColSize;
        prefixCls?: string;
    }
    const Col: React.ForwardRefExoticComponent<ColProps & React.RefAttributes<HTMLDivElement>>;
    export default Col;
}

declare module 'antd/node_modules/antd/lib/grid/hooks/useBreakpoint' {
    import { ScreenMap } from 'antd/node_modules/antd/lib/_util/responsiveObserve';
    function useBreakpoint(): ScreenMap;
    export default useBreakpoint;
}

declare module 'antd/node_modules/antd/lib/input/Input' {
    import * as React from 'react';
    import Group from 'antd/node_modules/antd/lib/input/Group';
    import Search from 'antd/node_modules/antd/lib/input/Search';
    import TextArea from 'antd/node_modules/antd/lib/input/TextArea';
    import Password from 'antd/node_modules/antd/lib/input/Password';
    import { Omit, LiteralUnion } from 'antd/node_modules/antd/lib/_util/type';
    import ClearableLabeledInput from 'antd/node_modules/antd/lib/input/ClearableLabeledInput';
    import { ConfigConsumerProps, DirectionType } from 'antd/node_modules/antd/lib/config-provider';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export interface InputFocusOptions extends FocusOptions {
        cursor?: 'start' | 'end' | 'all';
    }
    export interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'prefix' | 'type'> {
        prefixCls?: string;
        size?: SizeType;
        type?: LiteralUnion<'button' | 'checkbox' | 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'hidden' | 'image' | 'month' | 'number' | 'password' | 'radio' | 'range' | 'reset' | 'search' | 'submit' | 'tel' | 'text' | 'time' | 'url' | 'week', string>;
        onPressEnter?: React.KeyboardEventHandler<HTMLInputElement>;
        addonBefore?: React.ReactNode;
        addonAfter?: React.ReactNode;
        prefix?: React.ReactNode;
        suffix?: React.ReactNode;
        allowClear?: boolean;
        bordered?: boolean;
    }
    export function fixControlledValue<T>(value: T): "" | T;
    export function resolveOnChange<E extends HTMLInputElement | HTMLTextAreaElement>(target: E, e: React.ChangeEvent<E> | React.MouseEvent<HTMLElement, MouseEvent> | React.CompositionEvent<HTMLElement>, onChange: undefined | ((event: React.ChangeEvent<E>) => void), targetValue?: string): void;
    export function getInputClassName(prefixCls: string, bordered: boolean, size?: SizeType, disabled?: boolean, direction?: DirectionType): string;
    export function triggerFocus(element?: HTMLInputElement | HTMLTextAreaElement, option?: InputFocusOptions): void;
    export interface InputState {
        value: any;
        focused: boolean;
        /** `value` from prev props */
        prevValue: any;
    }
    class Input extends React.Component<InputProps, InputState> {
        static Group: typeof Group;
        static Search: typeof Search;
        static TextArea: typeof TextArea;
        static Password: typeof Password;
        static defaultProps: {
            type: string;
        };
        input: HTMLInputElement;
        clearableInput: ClearableLabeledInput;
        removePasswordTimeout: any;
        direction: DirectionType;
        constructor(props: InputProps);
        static getDerivedStateFromProps(nextProps: InputProps, { prevValue }: InputState): Partial<InputState>;
        componentDidMount(): void;
        componentDidUpdate(): void;
        getSnapshotBeforeUpdate(prevProps: InputProps): null;
        componentWillUnmount(): void;
        focus: (option?: InputFocusOptions | undefined) => void;
        blur(): void;
        setSelectionRange(start: number, end: number, direction?: 'forward' | 'backward' | 'none'): void;
        select(): void;
        saveClearableInput: (input: ClearableLabeledInput) => void;
        saveInput: (input: HTMLInputElement) => void;
        onFocus: React.FocusEventHandler<HTMLInputElement>;
        onBlur: React.FocusEventHandler<HTMLInputElement>;
        setValue(value: string, callback?: () => void): void;
        handleReset: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;
        renderInput: (prefixCls: string, size: SizeType | undefined, bordered: boolean, input?: ConfigConsumerProps['input']) => JSX.Element;
        clearPasswordValueAttribute: () => void;
        handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
        handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;
        renderComponent: ({ getPrefixCls, direction, input }: ConfigConsumerProps) => JSX.Element;
        render(): JSX.Element;
    }
    export default Input;
}

declare module 'antd/node_modules/antd/lib/input/Group' {
    import * as React from 'react';
    export interface GroupProps {
        className?: string;
        size?: 'large' | 'small' | 'default';
        children?: React.ReactNode;
        style?: React.CSSProperties;
        onMouseEnter?: React.MouseEventHandler<HTMLSpanElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLSpanElement>;
        onFocus?: React.FocusEventHandler<HTMLSpanElement>;
        onBlur?: React.FocusEventHandler<HTMLSpanElement>;
        prefixCls?: string;
        compact?: boolean;
    }
    const Group: React.FC<GroupProps>;
    export default Group;
}

declare module 'antd/node_modules/antd/lib/input/Search' {
    import * as React from 'react';
    import Input, { InputProps } from 'antd/node_modules/antd/lib/input/Input';
    export interface SearchProps extends InputProps {
        inputPrefixCls?: string;
        onSearch?: (value: string, event?: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLInputElement>) => void;
        enterButton?: React.ReactNode;
        loading?: boolean;
    }
    const Search: React.ForwardRefExoticComponent<SearchProps & React.RefAttributes<Input>>;
    export default Search;
}

declare module 'antd/node_modules/antd/lib/input/TextArea' {
    import * as React from 'react';
    import { TextAreaProps as RcTextAreaProps } from 'rc-textarea';
    import ResizableTextArea from 'rc-textarea/lib/ResizableTextArea';
    import { InputFocusOptions } from 'antd/node_modules/antd/lib/input/Input';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    interface ShowCountProps {
        formatter: (args: {
            count: number;
            maxLength?: number;
        }) => string;
    }
    export interface TextAreaProps extends RcTextAreaProps {
        allowClear?: boolean;
        bordered?: boolean;
        showCount?: boolean | ShowCountProps;
        size?: SizeType;
    }
    export interface TextAreaRef {
        focus: (options?: InputFocusOptions) => void;
        blur: () => void;
        resizableTextArea?: ResizableTextArea;
    }
    const TextArea: React.ForwardRefExoticComponent<TextAreaProps & React.RefAttributes<TextAreaRef>>;
    export default TextArea;
}

declare module 'antd/node_modules/antd/lib/input/Password' {
    import * as React from 'react';
    import { InputProps } from 'antd/node_modules/antd/lib/input/Input';
    export interface PasswordProps extends InputProps {
        readonly inputPrefixCls?: string;
        readonly action?: string;
        visibilityToggle?: boolean;
        iconRender?: (visible: boolean) => React.ReactNode;
    }
    const Password: React.ForwardRefExoticComponent<PasswordProps & React.RefAttributes<any>>;
    export default Password;
}

declare module 'antd/node_modules/antd/lib/image/PreviewGroup' {
    import * as React from 'react';
    import { GroupConsumerProps } from 'rc-image/lib/PreviewGroup';
    export const icons: {
        rotateLeft: JSX.Element;
        rotateRight: JSX.Element;
        zoomIn: JSX.Element;
        zoomOut: JSX.Element;
        close: JSX.Element;
        left: JSX.Element;
        right: JSX.Element;
    };
    const InternalPreviewGroup: React.FC<GroupConsumerProps>;
    export default InternalPreviewGroup;
}

declare module 'antd/node_modules/antd/lib/layout/layout' {
    import * as React from 'react';
    export interface GeneratorProps {
        suffixCls: string;
        tagName: 'header' | 'footer' | 'main' | 'section';
        displayName: string;
    }
    export interface BasicProps extends React.HTMLAttributes<HTMLDivElement> {
        prefixCls?: string;
        hasSider?: boolean;
    }
    export interface LayoutContextProps {
        siderHook: {
            addSider: (id: string) => void;
            removeSider: (id: string) => void;
        };
    }
    export const LayoutContext: React.Context<LayoutContextProps>;
    const Layout: React.FC<BasicProps>;
    const Header: React.FC<BasicProps>;
    const Footer: React.FC<BasicProps>;
    const Content: React.FC<BasicProps>;
    export { Header, Footer, Content };
    export default Layout;
}

declare module 'antd/node_modules/antd/lib/layout/Sider' {
    import * as React from 'react';
    export interface SiderContextProps {
        siderCollapsed?: boolean;
    }
    export const SiderContext: React.Context<SiderContextProps>;
    export type CollapseType = 'clickTrigger' | 'responsive';
    export type SiderTheme = 'light' | 'dark';
    export interface SiderProps extends React.HTMLAttributes<HTMLDivElement> {
        prefixCls?: string;
        collapsible?: boolean;
        collapsed?: boolean;
        defaultCollapsed?: boolean;
        reverseArrow?: boolean;
        onCollapse?: (collapsed: boolean, type: CollapseType) => void;
        zeroWidthTriggerStyle?: React.CSSProperties;
        trigger?: React.ReactNode;
        width?: number | string;
        collapsedWidth?: number | string;
        breakpoint?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
        theme?: SiderTheme;
        onBreakpoint?: (broken: boolean) => void;
    }
    export interface SiderState {
        collapsed?: boolean;
        below: boolean;
    }
    const Sider: React.ForwardRefExoticComponent<SiderProps & React.RefAttributes<HTMLDivElement>>;
    export default Sider;
}

declare module 'antd/node_modules/antd/lib/list/Item' {
    import * as React from 'react';
    import { ListGridType } from 'antd/node_modules/antd/lib/list/index';
    export interface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {
        className?: string;
        children?: React.ReactNode;
        prefixCls?: string;
        style?: React.CSSProperties;
        extra?: React.ReactNode;
        actions?: React.ReactNode[];
        grid?: ListGridType;
        colStyle?: React.CSSProperties;
    }
    export interface ListItemMetaProps {
        avatar?: React.ReactNode;
        className?: string;
        children?: React.ReactNode;
        description?: React.ReactNode;
        prefixCls?: string;
        style?: React.CSSProperties;
        title?: React.ReactNode;
    }
    export const Meta: React.FC<ListItemMetaProps>;
    export interface ListItemTypeProps extends React.FC<ListItemProps> {
        Meta: typeof Meta;
    }
    const Item: ListItemTypeProps;
    export default Item;
}

declare module 'antd/node_modules/antd/lib/menu/SubMenu' {
    import * as React from 'react';
    interface TitleEventEntity {
        key: string;
        domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;
    }
    export interface SubMenuProps {
        className?: string;
        disabled?: boolean;
        level?: number;
        title?: React.ReactNode;
        icon?: React.ReactNode;
        style?: React.CSSProperties;
        onTitleClick?: (e: TitleEventEntity) => void;
        onTitleMouseEnter?: (e: TitleEventEntity) => void;
        onTitleMouseLeave?: (e: TitleEventEntity) => void;
        popupOffset?: [number, number];
        popupClassName?: string;
        children?: React.ReactNode;
    }
    function SubMenu(props: SubMenuProps): JSX.Element;
    export default SubMenu;
}

declare module 'antd/node_modules/antd/lib/menu/MenuItem' {
    import * as React from 'react';
    import { MenuItemProps as RcMenuItemProps } from 'rc-menu';
    import { MenuContextProps } from 'antd/node_modules/antd/lib/menu/MenuContext';
    import { SiderContextProps } from 'antd/node_modules/antd/lib/layout/Sider';
    export interface MenuItemProps extends Omit<RcMenuItemProps, 'title'> {
        icon?: React.ReactNode;
        danger?: boolean;
        title?: React.ReactNode;
    }
    export default class MenuItem extends React.Component<MenuItemProps> {
        static contextType: React.Context<MenuContextProps>;
        context: MenuContextProps;
        renderItemChildren(inlineCollapsed: boolean): JSX.Element;
        renderItem: ({ siderCollapsed }: SiderContextProps) => JSX.Element;
        render(): JSX.Element;
    }
}

declare module 'antd/node_modules/antd/lib/menu/MenuContext' {
    import { DirectionType } from 'antd/node_modules/antd/lib/config-provider';
    export type MenuTheme = 'light' | 'dark';
    export interface MenuContextProps {
        prefixCls: string;
        inlineCollapsed: boolean;
        antdMenuTheme?: MenuTheme;
        direction?: DirectionType;
        firstLevel: boolean;
    }
    const MenuContext: import("react").Context<MenuContextProps>;
    export default MenuContext;
}

declare module 'antd/node_modules/antd/lib/modal/Modal' {
    import * as React from 'react';
    import useModal from 'antd/node_modules/antd/lib/modal/useModal';
    import { LegacyButtonType, ButtonProps } from 'antd/node_modules/antd/lib/button/button';
    import { DirectionType } from 'antd/node_modules/antd/lib/config-provider';
    export const destroyFns: Array<() => void>;
    export interface ModalProps {
        /** 对话框是否可见 */
        visible?: boolean;
        /** 确定按钮 loading */
        confirmLoading?: boolean;
        /** 标题 */
        title?: React.ReactNode | string;
        /** 是否显示右上角的关闭按钮 */
        closable?: boolean;
        /** 点击确定回调 */
        onOk?: (e: React.MouseEvent<HTMLElement>) => void;
        /** 点击模态框右上角叉、取消按钮、Props.maskClosable 值为 true 时的遮罩层或键盘按下 Esc 时的回调 */
        onCancel?: (e: React.MouseEvent<HTMLElement>) => void;
        afterClose?: () => void;
        /** 垂直居中 */
        centered?: boolean;
        /** 宽度 */
        width?: string | number;
        /** 底部内容 */
        footer?: React.ReactNode;
        /** 确认按钮文字 */
        okText?: React.ReactNode;
        /** 确认按钮类型 */
        okType?: LegacyButtonType;
        /** 取消按钮文字 */
        cancelText?: React.ReactNode;
        /** 点击蒙层是否允许关闭 */
        maskClosable?: boolean;
        /** 强制渲染 Modal */
        forceRender?: boolean;
        okButtonProps?: ButtonProps;
        cancelButtonProps?: ButtonProps;
        destroyOnClose?: boolean;
        style?: React.CSSProperties;
        wrapClassName?: string;
        maskTransitionName?: string;
        transitionName?: string;
        className?: string;
        getContainer?: string | HTMLElement | getContainerFunc | false | null;
        zIndex?: number;
        bodyStyle?: React.CSSProperties;
        maskStyle?: React.CSSProperties;
        mask?: boolean;
        keyboard?: boolean;
        wrapProps?: any;
        prefixCls?: string;
        closeIcon?: React.ReactNode;
        modalRender?: (node: React.ReactNode) => React.ReactNode;
        focusTriggerAfterClose?: boolean;
    }
    type getContainerFunc = () => HTMLElement;
    export interface ModalFuncProps {
        prefixCls?: string;
        className?: string;
        visible?: boolean;
        title?: React.ReactNode;
        closable?: boolean;
        content?: React.ReactNode;
        onOk?: (...args: any[]) => any;
        onCancel?: (...args: any[]) => any;
        afterClose?: () => void;
        okButtonProps?: ButtonProps;
        cancelButtonProps?: ButtonProps;
        centered?: boolean;
        width?: string | number;
        okText?: React.ReactNode;
        okType?: LegacyButtonType;
        cancelText?: React.ReactNode;
        icon?: React.ReactNode;
        mask?: boolean;
        maskClosable?: boolean;
        zIndex?: number;
        okCancel?: boolean;
        style?: React.CSSProperties;
        maskStyle?: React.CSSProperties;
        type?: 'info' | 'success' | 'error' | 'warn' | 'warning' | 'confirm';
        keyboard?: boolean;
        getContainer?: string | HTMLElement | getContainerFunc | false | null;
        autoFocusButton?: null | 'ok' | 'cancel';
        transitionName?: string;
        maskTransitionName?: string;
        direction?: DirectionType;
        bodyStyle?: React.CSSProperties;
        closeIcon?: React.ReactNode;
        modalRender?: (node: React.ReactNode) => React.ReactNode;
        focusTriggerAfterClose?: boolean;
    }
    export interface ModalLocale {
        okText: string;
        cancelText: string;
        justOkText: string;
    }
    interface ModalInterface extends React.FC<ModalProps> {
        useModal: typeof useModal;
    }
    const Modal: ModalInterface;
    export default Modal;
}

declare module 'antd/node_modules/antd/lib/modal/confirm' {
    import { ModalFuncProps } from 'antd/node_modules/antd/lib/modal/Modal';
    type ConfigUpdate = ModalFuncProps | ((prevConfig: ModalFuncProps) => ModalFuncProps);
    export type ModalFunc = (props: ModalFuncProps) => {
        destroy: () => void;
        update: (configUpdate: ConfigUpdate) => void;
    };
    export type ModalStaticFunctions = Record<NonNullable<ModalFuncProps['type']>, ModalFunc>;
    export default function confirm(config: ModalFuncProps): {
        destroy: (...args: any[]) => void;
        update: (configUpdate: ConfigUpdate) => void;
    };
    export function withWarn(props: ModalFuncProps): ModalFuncProps;
    export function withInfo(props: ModalFuncProps): ModalFuncProps;
    export function withSuccess(props: ModalFuncProps): ModalFuncProps;
    export function withError(props: ModalFuncProps): ModalFuncProps;
    export function withConfirm(props: ModalFuncProps): ModalFuncProps;
    export function modalGlobalConfig({ rootPrefixCls }: {
        rootPrefixCls: string;
    }): void;
    export {};
}

declare module 'antd/node_modules/antd/lib/modal/ActionButton' {
    import * as React from 'react';
    import { LegacyButtonType, ButtonProps } from 'antd/node_modules/antd/lib/button/button';
    export interface ActionButtonProps {
        type?: LegacyButtonType;
        actionFn?: (...args: any[]) => any | PromiseLike<any>;
        closeModal: Function;
        autoFocus?: boolean;
        prefixCls: string;
        buttonProps?: ButtonProps;
    }
    const ActionButton: React.FC<ActionButtonProps>;
    export default ActionButton;
}

declare module 'antd/node_modules/antd/lib/statistic/Statistic' {
    import * as React from 'react';
    import Countdown from 'antd/node_modules/antd/lib/statistic/Countdown';
    import { valueType, FormatConfig } from 'antd/node_modules/antd/lib/statistic/utils';
    interface StatisticComponent {
        Countdown: typeof Countdown;
    }
    export interface StatisticProps extends FormatConfig {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        value?: valueType;
        valueStyle?: React.CSSProperties;
        valueRender?: (node: React.ReactNode) => React.ReactNode;
        title?: React.ReactNode;
        prefix?: React.ReactNode;
        suffix?: React.ReactNode;
        loading?: boolean;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;
    }
    const WrapperStatistic: React.FC<StatisticProps> & StatisticComponent;
    export default WrapperStatistic;
}

declare module 'antd/node_modules/antd/lib/pagination/Pagination' {
    import * as React from 'react';
    export interface PaginationProps {
        total?: number;
        defaultCurrent?: number;
        disabled?: boolean;
        current?: number;
        defaultPageSize?: number;
        pageSize?: number;
        onChange?: (page: number, pageSize?: number) => void;
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: string[];
        onShowSizeChange?: (current: number, size: number) => void;
        showQuickJumper?: boolean | {
            goButton?: React.ReactNode;
        };
        showTitle?: boolean;
        showTotal?: (total: number, range: [number, number]) => React.ReactNode;
        size?: 'default' | 'small';
        responsive?: boolean;
        simple?: boolean;
        style?: React.CSSProperties;
        locale?: Object;
        className?: string;
        prefixCls?: string;
        selectPrefixCls?: string;
        itemRender?: (page: number, type: 'page' | 'prev' | 'next' | 'jump-prev' | 'jump-next', originalElement: React.ReactElement<HTMLElement>) => React.ReactNode;
        role?: string;
        showLessItems?: boolean;
    }
    export type PaginationPosition = 'top' | 'bottom' | 'both';
    export interface PaginationConfig extends PaginationProps {
        position?: PaginationPosition;
    }
    export type PaginationLocale = any;
    const Pagination: React.FC<PaginationProps>;
    export default Pagination;
}

declare module 'antd/node_modules/antd/lib/_util/getRenderPropValue' {
    import * as React from 'react';
    export type RenderFunction = () => React.ReactNode;
    export const getRenderPropValue: (propValue?: React.ReactNode | RenderFunction) => React.ReactNode;
}

declare module 'antd/node_modules/antd/lib/progress/progress' {
    import * as React from 'react';
    import { ConfigConsumerProps } from 'antd/node_modules/antd/lib/config-provider';
    const ProgressTypes: ["line", "circle", "dashboard"];
    export type ProgressType = typeof ProgressTypes[number];
    const ProgressStatuses: ["normal", "exception", "active", "success"];
    export type ProgressSize = 'default' | 'small';
    export type StringGradients = {
        [percentage: string]: string;
    };
    type FromToGradients = {
        from: string;
        to: string;
    };
    export type ProgressGradient = {
        direction?: string;
    } & (StringGradients | FromToGradients);
    export interface SuccessProps {
        percent?: number;
        /** @deprecated Use `percent` instead */
        progress?: number;
        strokeColor?: string;
    }
    export interface ProgressProps {
        prefixCls?: string;
        className?: string;
        type?: ProgressType;
        percent?: number;
        format?: (percent?: number, successPercent?: number) => React.ReactNode;
        status?: typeof ProgressStatuses[number];
        showInfo?: boolean;
        strokeWidth?: number;
        strokeLinecap?: 'butt' | 'square' | 'round';
        strokeColor?: string | ProgressGradient;
        trailColor?: string;
        width?: number;
        success?: SuccessProps;
        style?: React.CSSProperties;
        gapDegree?: number;
        gapPosition?: 'top' | 'bottom' | 'left' | 'right';
        size?: ProgressSize;
        steps?: number;
        /** @deprecated Use `success` instead */
        successPercent?: number;
    }
    export default class Progress extends React.Component<ProgressProps> {
        static defaultProps: {
            type: "circle" | "line" | "dashboard" | undefined;
            percent: number;
            showInfo: boolean;
            trailColor: null;
            size: ProgressSize | undefined;
            gapDegree: undefined;
            strokeLinecap: "round" | "butt" | "square" | undefined;
        };
        getPercentNumber(): number;
        getProgressStatus(): "success" | "normal" | "active" | "exception";
        renderProcessInfo(prefixCls: string, progressStatus: typeof ProgressStatuses[number]): JSX.Element | null;
        renderProgress: ({ getPrefixCls, direction }: ConfigConsumerProps) => JSX.Element;
        render(): JSX.Element;
    }
    export {};
}

declare module 'antd/node_modules/antd/lib/radio/group' {
    import * as React from 'react';
    import { RadioGroupProps } from 'antd/node_modules/antd/lib/radio/interface';
    const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<RadioGroupProps & React.RefAttributes<HTMLDivElement>>>;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/radio/radioButton' {
    import * as React from 'react';
    import { RadioChangeEvent } from 'antd/node_modules/antd/lib/radio/interface';
    import { AbstractCheckboxProps } from 'antd/node_modules/antd/lib/checkbox/Checkbox';
    export type RadioButtonProps = AbstractCheckboxProps<RadioChangeEvent>;
    const _default: React.ForwardRefExoticComponent<RadioButtonProps & React.RefAttributes<any>>;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/radio/interface' {
    import * as React from 'react';
    import { AbstractCheckboxGroupProps } from 'antd/node_modules/antd/lib/checkbox/Group';
    import { AbstractCheckboxProps } from 'antd/node_modules/antd/lib/checkbox/Checkbox';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export type RadioGroupButtonStyle = 'outline' | 'solid';
    export type RadioGroupOptionType = 'default' | 'button';
    export interface RadioGroupProps extends AbstractCheckboxGroupProps {
        defaultValue?: any;
        value?: any;
        onChange?: (e: RadioChangeEvent) => void;
        size?: SizeType;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;
        name?: string;
        children?: React.ReactNode;
        id?: string;
        optionType?: RadioGroupOptionType;
        buttonStyle?: RadioGroupButtonStyle;
    }
    export interface RadioGroupContextProps {
        onChange: (e: RadioChangeEvent) => void;
        value: any;
        disabled?: boolean;
        name?: string;
    }
    export type RadioProps = AbstractCheckboxProps<RadioChangeEvent>;
    export interface RadioChangeEventTarget extends RadioProps {
        checked: boolean;
    }
    export interface RadioChangeEvent {
        target: RadioChangeEventTarget;
        stopPropagation: () => void;
        preventDefault: () => void;
        nativeEvent: MouseEvent;
    }
}

declare module 'antd/node_modules/antd/lib/skeleton/Skeleton' {
    import * as React from 'react';
    import { SkeletonTitleProps } from 'antd/node_modules/antd/lib/skeleton/Title';
    import { SkeletonParagraphProps } from 'antd/node_modules/antd/lib/skeleton/Paragraph';
    import { AvatarProps } from 'antd/node_modules/antd/lib/skeleton/Avatar';
    interface SkeletonAvatarProps extends Omit<AvatarProps, 'active'> {
    }
    export interface SkeletonProps {
        active?: boolean;
        loading?: boolean;
        prefixCls?: string;
        className?: string;
        children?: React.ReactNode;
        avatar?: SkeletonAvatarProps | boolean;
        title?: SkeletonTitleProps | boolean;
        paragraph?: SkeletonParagraphProps | boolean;
        round?: boolean;
    }
    const Skeleton: {
        (props: SkeletonProps): JSX.Element;
        defaultProps: {
            avatar: boolean;
            title: boolean;
            paragraph: boolean;
        };
        Button: {
            (props: import("./Button").SkeletonButtonProps): JSX.Element;
            defaultProps: {
                size: string;
            };
        };
        Avatar: {
            (props: AvatarProps): JSX.Element;
            defaultProps: {
                size: string;
                shape: string;
            };
        };
        Input: {
            (props: import("./Input").SkeletonInputProps): JSX.Element;
            defaultProps: {
                size: string;
            };
        };
        Image: (props: import("./Image").SkeletonImageProps) => JSX.Element;
    };
    export default Skeleton;
}

declare module 'antd/node_modules/antd/lib/table/Table' {
    import { TableProps as RcTableProps } from 'rc-table/lib/Table';
    import { SpinProps } from 'antd/node_modules/antd/lib/spin';
    import { TooltipProps } from 'antd/node_modules/antd/lib/tooltip';
    import { TableRowSelection, ColumnsType, TableCurrentDataSource, SorterResult, GetPopupContainer, TablePaginationConfig, SortOrder, TableLocale, FilterValue } from 'antd/node_modules/antd/lib/table/interface';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    export { ColumnsType, TablePaginationConfig };
    export interface TableProps<RecordType> extends Omit<RcTableProps<RecordType>, 'transformColumns' | 'internalHooks' | 'internalRefs' | 'data' | 'columns' | 'scroll' | 'emptyText'> {
        dropdownPrefixCls?: string;
        dataSource?: RcTableProps<RecordType>['data'];
        columns?: ColumnsType<RecordType>;
        pagination?: false | TablePaginationConfig;
        loading?: boolean | SpinProps;
        size?: SizeType;
        bordered?: boolean;
        locale?: TableLocale;
        onChange?: (pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>, sorter: SorterResult<RecordType> | SorterResult<RecordType>[], extra: TableCurrentDataSource<RecordType>) => void;
        rowSelection?: TableRowSelection<RecordType>;
        getPopupContainer?: GetPopupContainer;
        scroll?: RcTableProps<RecordType>['scroll'] & {
            scrollToFirstRowOnChange?: boolean;
        };
        sortDirections?: SortOrder[];
        showSorterTooltip?: boolean | TooltipProps;
    }
    function Table<RecordType extends object = any>(props: TableProps<RecordType>): JSX.Element;
    namespace Table {
        var defaultProps: {
            rowKey: string;
        };
        var SELECTION_ALL: "SELECT_ALL";
        var SELECTION_INVERT: "SELECT_INVERT";
        var SELECTION_NONE: "SELECT_NONE";
        var Column: typeof import("./Column").default;
        var ColumnGroup: typeof import("./ColumnGroup").default;
        var Summary: typeof import("rc-table/lib/Footer/Summary").default;
    }
    export default Table;
}

declare module 'antd/node_modules/antd/lib/table/Column' {
    import { ColumnType } from 'antd/node_modules/antd/lib/table/interface';
    export interface ColumnProps<RecordType> extends ColumnType<RecordType> {
        children?: null;
    }
    /** This is a syntactic sugar for `columns` prop. So HOC will not work on this. */
    function Column<RecordType>(_: ColumnProps<RecordType>): null;
    export default Column;
}

declare module 'antd/node_modules/antd/lib/table/interface' {
    import * as React from 'react';
    import { GetRowKey, ColumnType as RcColumnType, RenderedCell as RcRenderedCell, ExpandableConfig } from 'rc-table/lib/interface';
    import { TooltipProps } from 'antd/node_modules/antd/lib/tooltip';
    import { CheckboxProps } from 'antd/node_modules/antd/lib/checkbox';
    import { PaginationProps } from 'antd/node_modules/antd/lib/pagination';
    import { Breakpoint } from 'antd/node_modules/antd/lib/_util/responsiveObserve';
    import { INTERNAL_SELECTION_ITEM } from 'antd/node_modules/antd/lib/table/hooks/useSelection';
    export { GetRowKey, ExpandableConfig };
    export type Key = React.Key;
    export type RowSelectionType = 'checkbox' | 'radio';
    export type SelectionItemSelectFn = (currentRowKeys: Key[]) => void;
    export type ExpandType = null | 'row' | 'nest';
    export interface TableLocale {
        filterTitle?: string;
        filterConfirm?: React.ReactNode;
        filterReset?: React.ReactNode;
        filterEmptyText?: React.ReactNode;
        emptyText?: React.ReactNode | (() => React.ReactNode);
        selectAll?: React.ReactNode;
        selectNone?: React.ReactNode;
        selectInvert?: React.ReactNode;
        selectionAll?: React.ReactNode;
        sortTitle?: string;
        expand?: string;
        collapse?: string;
        triggerDesc?: string;
        triggerAsc?: string;
        cancelSort?: string;
    }
    export type SortOrder = 'descend' | 'ascend' | null;
    const TableActions: ["paginate", "sort", "filter"];
    export type TableAction = typeof TableActions[number];
    export type CompareFn<T> = (a: T, b: T, sortOrder?: SortOrder) => number;
    export interface ColumnFilterItem {
        text: React.ReactNode;
        value: string | number | boolean;
        children?: ColumnFilterItem[];
    }
    export interface ColumnTitleProps<RecordType> {
        /** @deprecated Please use `sorterColumns` instead. */
        sortOrder?: SortOrder;
        /** @deprecated Please use `sorterColumns` instead. */
        sortColumn?: ColumnType<RecordType>;
        sortColumns?: {
            column: ColumnType<RecordType>;
            order: SortOrder;
        }[];
        filters?: Record<string, string[]>;
    }
    export type ColumnTitle<RecordType> = React.ReactNode | ((props: ColumnTitleProps<RecordType>) => React.ReactNode);
    export type FilterValue = (Key | boolean)[];
    export type FilterKey = Key[] | null;
    export interface FilterConfirmProps {
        closeDropdown: boolean;
    }
    export interface FilterDropdownProps {
        prefixCls: string;
        setSelectedKeys: (selectedKeys: React.Key[]) => void;
        selectedKeys: React.Key[];
        confirm: (param?: FilterConfirmProps) => void;
        clearFilters?: () => void;
        filters?: ColumnFilterItem[];
        visible: boolean;
    }
    export interface ColumnType<RecordType> extends RcColumnType<RecordType> {
        title?: ColumnTitle<RecordType>;
        sorter?: boolean | CompareFn<RecordType> | {
            compare?: CompareFn<RecordType>;
            /** Config multiple sorter order priority */
            multiple?: number;
        };
        sortOrder?: SortOrder;
        defaultSortOrder?: SortOrder;
        sortDirections?: SortOrder[];
        showSorterTooltip?: boolean | TooltipProps;
        filtered?: boolean;
        filters?: ColumnFilterItem[];
        filterDropdown?: React.ReactNode | ((props: FilterDropdownProps) => React.ReactNode);
        filterMultiple?: boolean;
        filteredValue?: FilterValue | null;
        defaultFilteredValue?: FilterValue | null;
        filterIcon?: React.ReactNode | ((filtered: boolean) => React.ReactNode);
        onFilter?: (value: string | number | boolean, record: RecordType) => boolean;
        filterDropdownVisible?: boolean;
        onFilterDropdownVisibleChange?: (visible: boolean) => void;
        responsive?: Breakpoint[];
    }
    export interface ColumnGroupType<RecordType> extends Omit<ColumnType<RecordType>, 'dataIndex'> {
        children: ColumnsType<RecordType>;
    }
    export type ColumnsType<RecordType = unknown> = (ColumnGroupType<RecordType> | ColumnType<RecordType>)[];
    export interface SelectionItem {
        key: string;
        text: React.ReactNode;
        onSelect?: SelectionItemSelectFn;
    }
    export type SelectionSelectFn<T> = (record: T, selected: boolean, selectedRows: T[], nativeEvent: Event) => void;
    export interface TableRowSelection<T> {
        /** Keep the selection keys in list even the key not exist in `dataSource` anymore */
        preserveSelectedRowKeys?: boolean;
        type?: RowSelectionType;
        selectedRowKeys?: Key[];
        defaultSelectedRowKeys?: Key[];
        onChange?: (selectedRowKeys: Key[], selectedRows: T[]) => void;
        getCheckboxProps?: (record: T) => Partial<Omit<CheckboxProps, 'checked' | 'defaultChecked'>>;
        onSelect?: SelectionSelectFn<T>;
        onSelectMultiple?: (selected: boolean, selectedRows: T[], changeRows: T[]) => void;
        /** @deprecated This function is meaningless and should use `onChange` instead */
        onSelectAll?: (selected: boolean, selectedRows: T[], changeRows: T[]) => void;
        /** @deprecated This function is meaningless and should use `onChange` instead */
        onSelectInvert?: (selectedRowKeys: Key[]) => void;
        onSelectNone?: () => void;
        selections?: INTERNAL_SELECTION_ITEM[] | boolean;
        hideSelectAll?: boolean;
        fixed?: boolean;
        columnWidth?: string | number;
        columnTitle?: string | React.ReactNode;
        checkStrictly?: boolean;
        renderCell?: (value: boolean, record: T, index: number, originNode: React.ReactNode) => React.ReactNode | RcRenderedCell<T>;
    }
    export type TransformColumns<RecordType> = (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>;
    export interface TableCurrentDataSource<RecordType> {
        currentDataSource: RecordType[];
        action: TableAction;
    }
    export interface SorterResult<RecordType> {
        column?: ColumnType<RecordType>;
        order?: SortOrder;
        field?: Key | readonly Key[];
        columnKey?: Key;
    }
    export type GetPopupContainer = (triggerNode: HTMLElement) => HTMLElement;
    type TablePaginationPosition = 'topLeft' | 'topCenter' | 'topRight' | 'bottomLeft' | 'bottomCenter' | 'bottomRight';
    export interface TablePaginationConfig extends PaginationProps {
        position?: TablePaginationPosition[];
    }
}

declare module 'antd/node_modules/antd/lib/transfer/list' {
    import * as React from 'react';
    import { TransferDirection, RenderResult, SelectAllLabel, TransferLocale, KeyWiseTransferItem } from 'antd/node_modules/antd/lib/transfer/index';
    import DefaultListBody, { TransferListBodyProps } from 'antd/node_modules/antd/lib/transfer/ListBody';
    import { PaginationType } from 'antd/node_modules/antd/lib/transfer/interface';
    export interface RenderedItem<RecordType> {
        renderedText: string;
        renderedEl: React.ReactNode;
        item: RecordType;
    }
    type RenderListFunction<T> = (props: TransferListBodyProps<T>) => React.ReactNode;
    export interface TransferListProps<RecordType> extends TransferLocale {
        prefixCls: string;
        titleText: React.ReactNode;
        dataSource: RecordType[];
        filterOption?: (filterText: string, item: RecordType) => boolean;
        style?: React.CSSProperties;
        checkedKeys: string[];
        handleFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;
        onItemSelect: (key: string, check: boolean) => void;
        onItemSelectAll: (dataSource: string[], checkAll: boolean) => void;
        onItemRemove?: (keys: string[]) => void;
        handleClear: () => void;
        /** Render item */
        render?: (item: RecordType) => RenderResult;
        showSearch?: boolean;
        searchPlaceholder: string;
        itemUnit: string;
        itemsUnit: string;
        renderList?: RenderListFunction<RecordType>;
        footer?: (props: TransferListProps<RecordType>) => React.ReactNode;
        onScroll: (e: React.UIEvent<HTMLUListElement>) => void;
        disabled?: boolean;
        direction: TransferDirection;
        showSelectAll?: boolean;
        selectAllLabel?: SelectAllLabel;
        showRemove?: boolean;
        pagination?: PaginationType;
    }
    interface TransferListState {
        /** Filter input value */
        filterValue: string;
    }
    export default class TransferList<RecordType extends KeyWiseTransferItem> extends React.PureComponent<TransferListProps<RecordType>, TransferListState> {
        static defaultProps: {
            dataSource: never[];
            titleText: string;
            showSearch: boolean;
        };
        timer: number;
        triggerScrollTimer: number;
        defaultListBodyRef: React.RefObject<DefaultListBody<RecordType>>;
        constructor(props: TransferListProps<RecordType>);
        componentWillUnmount(): void;
        getCheckStatus(filteredItems: RecordType[]): "none" | "all" | "part";
        getFilteredItems(dataSource: RecordType[], filterValue: string): {
            filteredItems: RecordType[];
            filteredRenderItems: RenderedItem<RecordType>[];
        };
        handleFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;
        handleClear: () => void;
        matchFilter: (text: string, item: RecordType) => boolean;
        getCurrentPageItems: () => void;
        renderListBody: (renderList: RenderListFunction<RecordType> | undefined, props: TransferListBodyProps<RecordType>) => {
            customize: boolean;
            bodyContent: React.ReactNode;
        };
        getListBody(prefixCls: string, searchPlaceholder: string, filterValue: string, filteredItems: RecordType[], notFoundContent: React.ReactNode, filteredRenderItems: RenderedItem<RecordType>[], checkedKeys: string[], renderList?: RenderListFunction<RecordType>, showSearch?: boolean, disabled?: boolean): React.ReactNode;
        getCheckBox(filteredItems: RecordType[], onItemSelectAll: (dataSource: string[], checkAll: boolean) => void, showSelectAll?: boolean, disabled?: boolean, prefixCls?: string): false | JSX.Element;
        renderItem: (item: RecordType) => RenderedItem<RecordType>;
        getSelectAllLabel: (selectedCount: number, totalCount: number) => React.ReactNode;
        render(): JSX.Element;
    }
    export {};
}

declare module 'antd/node_modules/antd/lib/transfer/search' {
    import * as React from 'react';
    export interface TransferSearchProps {
        prefixCls?: string;
        placeholder?: string;
        onChange?: (e: React.FormEvent<HTMLElement>) => void;
        handleClear?: (e: React.MouseEvent<HTMLElement>) => void;
        value?: string;
        disabled?: boolean;
    }
    export default function Search(props: TransferSearchProps): JSX.Element;
}

declare module 'antd/node_modules/antd/lib/transfer/ListBody' {
    import * as React from 'react';
    import { ElementOf, Omit } from 'antd/node_modules/antd/lib/_util/type';
    import { TransferListProps, RenderedItem } from 'antd/node_modules/antd/lib/transfer/list';
    import { KeyWiseTransferItem } from 'antd/node_modules/antd/lib/transfer';
    export const OmitProps: ["handleFilter", "handleClear", "checkedKeys"];
    export type OmitProp = ElementOf<typeof OmitProps>;
    type PartialTransferListProps<RecordType> = Omit<TransferListProps<RecordType>, OmitProp>;
    export interface TransferListBodyProps<RecordType> extends PartialTransferListProps<RecordType> {
        filteredItems: RecordType[];
        filteredRenderItems: RenderedItem<RecordType>[];
        selectedKeys: string[];
    }
    interface TransferListBodyState {
        current: number;
    }
    class ListBody<RecordType extends KeyWiseTransferItem> extends React.Component<TransferListBodyProps<RecordType>, TransferListBodyState> {
        state: {
            current: number;
        };
        static getDerivedStateFromProps<T>({ filteredRenderItems, pagination }: TransferListBodyProps<T>, { current }: TransferListBodyState): {
            current: number;
        } | null;
        onItemSelect: (item: RecordType) => void;
        onItemRemove: (item: RecordType) => void;
        onPageChange: (current: number) => void;
        getItems: () => RenderedItem<RecordType>[];
        render(): JSX.Element;
    }
    export default ListBody;
}

declare module 'antd/node_modules/antd/lib/transfer/interface' {
    export type PaginationType = boolean | {
        pageSize?: number;
    };
}

declare module 'antd/node_modules/antd/lib/transfer/operation' {
    import * as React from 'react';
    import { DirectionType } from 'antd/node_modules/antd/lib/config-provider';
    export interface TransferOperationProps {
        className?: string;
        leftArrowText?: string;
        rightArrowText?: string;
        moveToLeft?: React.MouseEventHandler<HTMLButtonElement>;
        moveToRight?: React.MouseEventHandler<HTMLButtonElement>;
        leftActive?: boolean;
        rightActive?: boolean;
        style?: React.CSSProperties;
        disabled?: boolean;
        direction?: DirectionType;
        oneWay?: boolean;
    }
    const Operation: ({ disabled, moveToLeft, moveToRight, leftArrowText, rightArrowText, leftActive, rightActive, className, style, direction, oneWay, }: TransferOperationProps) => JSX.Element;
    export default Operation;
}

declare module 'antd/node_modules/antd/lib/tree/Tree' {
    import * as React from 'react';
    import RcTree, { TreeNode, TreeProps as RcTreeProps } from 'rc-tree';
    import { DataNode, Key } from 'rc-tree/lib/interface';
    import DirectoryTree from 'antd/node_modules/antd/lib/tree/DirectoryTree';
    export interface AntdTreeNodeAttribute {
        eventKey: string;
        prefixCls: string;
        className: string;
        expanded: boolean;
        selected: boolean;
        checked: boolean;
        halfChecked: boolean;
        children: React.ReactNode;
        title: React.ReactNode;
        pos: string;
        dragOver: boolean;
        dragOverGapTop: boolean;
        dragOverGapBottom: boolean;
        isLeaf: boolean;
        selectable: boolean;
        disabled: boolean;
        disableCheckbox: boolean;
    }
    export interface AntTreeNodeProps {
        className?: string;
        checkable?: boolean;
        disabled?: boolean;
        disableCheckbox?: boolean;
        title?: string | React.ReactNode;
        key?: Key;
        eventKey?: string;
        isLeaf?: boolean;
        checked?: boolean;
        expanded?: boolean;
        loading?: boolean;
        selected?: boolean;
        selectable?: boolean;
        icon?: ((treeNode: AntdTreeNodeAttribute) => React.ReactNode) | React.ReactNode;
        children?: React.ReactNode;
        [customProp: string]: any;
    }
    export interface AntTreeNode extends React.Component<AntTreeNodeProps, {}> {
    }
    export interface AntTreeNodeBaseEvent {
        node: AntTreeNode;
        nativeEvent: MouseEvent;
    }
    export interface AntTreeNodeCheckedEvent extends AntTreeNodeBaseEvent {
        event: 'check';
        checked?: boolean;
        checkedNodes?: AntTreeNode[];
    }
    export interface AntTreeNodeSelectedEvent extends AntTreeNodeBaseEvent {
        event: 'select';
        selected?: boolean;
        selectedNodes?: DataNode[];
    }
    export interface AntTreeNodeExpandedEvent extends AntTreeNodeBaseEvent {
        expanded?: boolean;
    }
    export interface AntTreeNodeMouseEvent {
        node: AntTreeNode;
        event: React.DragEvent<HTMLElement>;
    }
    export interface AntTreeNodeDragEnterEvent extends AntTreeNodeMouseEvent {
        expandedKeys: Key[];
    }
    export interface AntTreeNodeDropEvent {
        node: AntTreeNode;
        dragNode: AntTreeNode;
        dragNodesKeys: Key[];
        dropPosition: number;
        dropToGap?: boolean;
        event: React.MouseEvent<HTMLElement>;
    }
    export type TreeNodeNormal = DataNode;
    export interface TreeProps extends Omit<RcTreeProps, 'prefixCls' | 'showLine' | 'direction'> {
        showLine?: boolean | {
            showLeafIcon: boolean;
        };
        className?: string;
        /** 是否支持多选 */
        multiple?: boolean;
        /** 是否自动展开父节点 */
        autoExpandParent?: boolean;
        /** Checkable状态下节点选择完全受控（父子节点选中状态不再关联） */
        checkStrictly?: boolean;
        /** 是否支持选中 */
        checkable?: boolean;
        /** 是否禁用树 */
        disabled?: boolean;
        /** 默认展开所有树节点 */
        defaultExpandAll?: boolean;
        /** 默认展开对应树节点 */
        defaultExpandParent?: boolean;
        /** 默认展开指定的树节点 */
        defaultExpandedKeys?: Key[];
        /** （受控）展开指定的树节点 */
        expandedKeys?: Key[];
        /** （受控）选中复选框的树节点 */
        checkedKeys?: Key[] | {
            checked: Key[];
            halfChecked: Key[];
        };
        /** 默认选中复选框的树节点 */
        defaultCheckedKeys?: Key[];
        /** （受控）设置选中的树节点 */
        selectedKeys?: Key[];
        /** 默认选中的树节点 */
        defaultSelectedKeys?: Key[];
        selectable?: boolean;
        /** 点击树节点触发 */
        filterAntTreeNode?: (node: AntTreeNode) => boolean;
        loadedKeys?: Key[];
        /** 设置节点可拖拽（IE>8） */
        draggable?: ((node: DataNode) => boolean) | boolean;
        style?: React.CSSProperties;
        showIcon?: boolean;
        icon?: ((nodeProps: AntdTreeNodeAttribute) => React.ReactNode) | React.ReactNode;
        switcherIcon?: React.ReactElement<any>;
        prefixCls?: string;
        children?: React.ReactNode;
        blockNode?: boolean;
    }
    interface CompoundedComponent extends React.ForwardRefExoticComponent<TreeProps & React.RefAttributes<RcTree>> {
        TreeNode: typeof TreeNode;
        DirectoryTree: typeof DirectoryTree;
    }
    const Tree: CompoundedComponent;
    export default Tree;
}

declare module 'antd/node_modules/antd/lib/tree/DirectoryTree' {
    import * as React from 'react';
    import RcTree from 'rc-tree';
    import { Key } from 'rc-tree/lib/interface';
    import { TreeProps } from 'antd/node_modules/antd/lib/tree/Tree';
    export type ExpandAction = false | 'click' | 'doubleClick';
    export interface DirectoryTreeProps extends TreeProps {
        expandAction?: ExpandAction;
    }
    export interface DirectoryTreeState {
        expandedKeys?: Key[];
        selectedKeys?: Key[];
    }
    const ForwardDirectoryTree: React.ForwardRefExoticComponent<DirectoryTreeProps & React.RefAttributes<RcTree>>;
    export default ForwardDirectoryTree;
}

declare module 'antd/node_modules/antd/lib/tag/CheckableTag' {
    import * as React from 'react';
    export interface CheckableTagProps {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        /**
          * It is an absolute controlled component and has no uncontrolled mode.
          *
          * .zh-cn 该组件为完全受控组件，不支持非受控用法。
          */
        checked: boolean;
        onChange?: (checked: boolean) => void;
        onClick?: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    }
    const CheckableTag: React.FC<CheckableTagProps>;
    export default CheckableTag;
}

declare module 'antd/node_modules/antd/lib/timeline/Timeline' {
    import * as React from 'react';
    import { TimelineItemProps } from 'antd/node_modules/antd/lib/timeline/TimelineItem';
    export interface TimelineProps {
        prefixCls?: string;
        className?: string;
        /** 指定最后一个幽灵节点是否存在或内容 */
        pending?: React.ReactNode;
        pendingDot?: React.ReactNode;
        style?: React.CSSProperties;
        reverse?: boolean;
        mode?: 'left' | 'alternate' | 'right';
    }
    interface TimelineType extends React.FC<TimelineProps> {
        Item: React.FC<TimelineItemProps>;
    }
    const Timeline: TimelineType;
    export default Timeline;
}

declare module 'antd/node_modules/antd/lib/timeline/TimelineItem' {
    import * as React from 'react';
    export interface TimelineItemProps {
        prefixCls?: string;
        className?: string;
        color?: string;
        dot?: React.ReactNode;
        pending?: boolean;
        position?: string;
        style?: React.CSSProperties;
        label?: React.ReactNode;
    }
    export interface TimeLineItemProps extends TimelineItemProps {
        __deprecated_do_not_use_it__?: any;
    }
    const TimelineItem: React.FC<TimelineItemProps>;
    export default TimelineItem;
}

declare module 'antd/node_modules/antd/lib/tooltip/placements' {
    import { BuildInPlacements } from 'rc-trigger';
    export interface AdjustOverflow {
        adjustX?: 0 | 1;
        adjustY?: 0 | 1;
    }
    export interface PlacementsConfig {
        arrowWidth?: number;
        horizontalArrowShift?: number;
        verticalArrowShift?: number;
        arrowPointAtCenter?: boolean;
        autoAdjustOverflow?: boolean | AdjustOverflow;
    }
    export function getOverflowOptions(autoAdjustOverflow?: boolean | AdjustOverflow): {
        adjustX: number;
        adjustY: number;
    };
    export default function getPlacements(config: PlacementsConfig): BuildInPlacements;
}

declare module 'antd/node_modules/antd/lib/typography/Typography' {
    import * as React from 'react';
    export interface TypographyProps {
        id?: string;
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        children?: React.ReactNode;
        ['aria-label']?: string;
    }
    const ExportTypography: React.FC<TypographyProps>;
    export default ExportTypography;
}

declare module 'antd/node_modules/antd/lib/typography/Text' {
    import * as React from 'react';
    import { BlockProps, EllipsisConfig } from 'antd/node_modules/antd/lib/typography/Base';
    export interface TextProps extends BlockProps {
        ellipsis?: boolean | Omit<EllipsisConfig, 'expandable' | 'rows' | 'onExpand'>;
        onClick?: (e?: React.MouseEvent<HTMLDivElement>) => void;
    }
    const Text: React.FC<TextProps>;
    export default Text;
}

declare module 'antd/node_modules/antd/lib/typography/Link' {
    import * as React from 'react';
    import { BlockProps } from 'antd/node_modules/antd/lib/typography/Base';
    export interface LinkProps extends BlockProps, Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'type'> {
        ellipsis?: boolean;
    }
    const _default: React.ForwardRefExoticComponent<LinkProps & React.RefAttributes<HTMLElement>>;
    export default _default;
}

declare module 'antd/node_modules/antd/lib/typography/Title' {
    import * as React from 'react';
    import { BlockProps } from 'antd/node_modules/antd/lib/typography/Base';
    import { Omit } from 'antd/node_modules/antd/lib/_util/type';
    const TITLE_ELE_LIST: [1, 2, 3, 4, 5];
    export type TitleProps = Omit<BlockProps & {
        level?: typeof TITLE_ELE_LIST[number];
        onClick?: (e?: React.MouseEvent<HTMLDivElement>) => void;
    }, 'strong'>;
    const Title: React.FC<TitleProps>;
    export default Title;
}

declare module 'antd/node_modules/antd/lib/typography/Paragraph' {
    import * as React from 'react';
    import { BlockProps } from 'antd/node_modules/antd/lib/typography/Base';
    export interface ParagraphProps extends BlockProps {
        onClick?: (e?: React.MouseEvent<HTMLDivElement>) => void;
    }
    const Paragraph: React.FC<ParagraphProps>;
    export default Paragraph;
}

declare module 'antd/node_modules/antd/lib/upload/Upload' {
    import * as React from 'react';
    import Dragger from 'antd/node_modules/antd/lib/upload/Dragger';
    import { UploadProps } from 'antd/node_modules/antd/lib/upload/interface';
    export { UploadProps };
    interface CompoundedComponent extends React.ForwardRefExoticComponent<React.PropsWithChildren<UploadProps> & React.RefAttributes<any>> {
        Dragger: typeof Dragger;
        LIST_IGNORE: string;
    }
    const Upload: CompoundedComponent;
    export default Upload;
}

declare module 'antd/node_modules/antd/lib/upload/interface' {
    import * as React from 'react';
    import { RcFile as OriRcFile, UploadRequestOption as RcCustomRequestOptions } from 'rc-upload/lib/interface';
    import { ProgressProps } from 'antd/node_modules/antd/lib/progress';
    export interface RcFile extends OriRcFile {
        readonly lastModifiedDate: Date;
    }
    export type UploadFileStatus = 'error' | 'success' | 'done' | 'uploading' | 'removed';
    export interface HttpRequestHeader {
        [key: string]: string;
    }
    export interface UploadFile<T = any> {
        uid: string;
        size?: number;
        name: string;
        fileName?: string;
        lastModified?: number;
        lastModifiedDate?: Date;
        url?: string;
        status?: UploadFileStatus;
        percent?: number;
        thumbUrl?: string;
        originFileObj?: RcFile;
        response?: T;
        error?: any;
        linkProps?: any;
        type?: string;
        xhr?: T;
        preview?: string;
    }
    export interface InternalUploadFile<T = any> extends UploadFile<T> {
        originFileObj: RcFile;
    }
    export interface UploadChangeParam<T extends object = UploadFile> {
        file: T;
        fileList: UploadFile[];
        event?: {
            percent: number;
        };
    }
    export interface ShowUploadListInterface {
        showRemoveIcon?: boolean;
        showPreviewIcon?: boolean;
        showDownloadIcon?: boolean;
        removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);
        downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);
    }
    export interface UploadLocale {
        uploading?: string;
        removeFile?: string;
        downloadFile?: string;
        uploadError?: string;
        previewFile?: string;
    }
    export type UploadType = 'drag' | 'select';
    export type UploadListType = 'text' | 'picture' | 'picture-card';
    export type UploadListProgressProps = Omit<ProgressProps, 'percent' | 'type'>;
    export type ItemRender<T = any> = (originNode: React.ReactElement, file: UploadFile, fileList: Array<UploadFile<T>>, actions: {
        download: () => void;
        preview: () => void;
        remove: () => void;
    }) => React.ReactNode;
    type PreviewFileHandler = (file: File | Blob) => PromiseLike<string>;
    type TransformFileHandler = (file: RcFile) => string | Blob | File | PromiseLike<string | Blob | File>;
    type BeforeUploadValueType = void | boolean | string | Blob | File;
    export interface UploadProps<T = any> {
        type?: UploadType;
        name?: string;
        defaultFileList?: Array<UploadFile<T>>;
        fileList?: Array<UploadFile<T>>;
        action?: string | ((file: RcFile) => string) | ((file: RcFile) => PromiseLike<string>);
        directory?: boolean;
        data?: object | ((file: UploadFile<T>) => object);
        method?: 'POST' | 'PUT' | 'PATCH' | 'post' | 'put' | 'patch';
        headers?: HttpRequestHeader;
        showUploadList?: boolean | ShowUploadListInterface;
        multiple?: boolean;
        accept?: string;
        beforeUpload?: (file: RcFile, FileList: RcFile[]) => BeforeUploadValueType | Promise<BeforeUploadValueType>;
        onChange?: (info: UploadChangeParam) => void;
        onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
        listType?: UploadListType;
        className?: string;
        onPreview?: (file: UploadFile<T>) => void;
        onDownload?: (file: UploadFile<T>) => void;
        onRemove?: (file: UploadFile<T>) => void | boolean | Promise<void | boolean>;
        supportServerRender?: boolean;
        style?: React.CSSProperties;
        disabled?: boolean;
        prefixCls?: string;
        customRequest?: (options: RcCustomRequestOptions) => void;
        withCredentials?: boolean;
        openFileDialogOnClick?: boolean;
        locale?: UploadLocale;
        id?: string;
        previewFile?: PreviewFileHandler;
        /** @deprecated Please use `beforeUpload` directly */
        transformFile?: TransformFileHandler;
        iconRender?: (file: UploadFile<T>, listType?: UploadListType) => React.ReactNode;
        isImageUrl?: (file: UploadFile) => boolean;
        progress?: UploadListProgressProps;
        itemRender?: ItemRender<T>;
        /** Config max count of `fileList`. Will replace current one when `maxCount` is 1 */
        maxCount?: number;
    }
    export interface UploadState<T = any> {
        fileList: UploadFile<T>[];
        dragState: string;
    }
    export interface UploadListProps<T = any> {
        listType?: UploadListType;
        onPreview?: (file: UploadFile<T>) => void;
        onDownload?: (file: UploadFile<T>) => void;
        onRemove?: (file: UploadFile<T>) => void | boolean;
        items?: Array<UploadFile<T>>;
        progress?: UploadListProgressProps;
        prefixCls?: string;
        showRemoveIcon?: boolean;
        showDownloadIcon?: boolean;
        showPreviewIcon?: boolean;
        removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);
        downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);
        locale: UploadLocale;
        previewFile?: PreviewFileHandler;
        iconRender?: (file: UploadFile<T>, listType?: UploadListType) => React.ReactNode;
        isImageUrl?: (file: UploadFile) => boolean;
        appendAction?: React.ReactNode;
        itemRender?: ItemRender<T>;
    }
    export {};
}

declare module 'antd/node_modules/antd/lib/upload/Dragger' {
    import * as React from 'react';
    import { UploadProps } from 'antd/node_modules/antd/lib/upload/interface';
    export type DraggerProps = UploadProps & {
        height?: number;
    };
    const Dragger: React.FC<DraggerProps>;
    export default Dragger;
}

declare module 'antd/node_modules/antd/lib/version/version' {
    const _default: "4.16.5";
    export default _default;
}

declare module 'antd/node_modules/antd/lib/avatar/SizeContext' {
    import * as React from 'react';
    import { ScreenSizeMap } from 'antd/node_modules/antd/lib/_util/responsiveObserve';
    export type AvatarSize = 'large' | 'small' | 'default' | number | ScreenSizeMap;
    const SizeContext: React.Context<AvatarSize>;
    export interface SizeContextProps {
        size?: AvatarSize;
    }
    export const SizeContextProvider: React.FC<SizeContextProps>;
    export default SizeContext;
}

declare module 'antd/node_modules/antd/lib/breadcrumb/BreadcrumbSeparator' {
    import * as React from 'react';
    interface BreadcrumbSeparatorInterface extends React.FC {
        __ANT_BREADCRUMB_SEPARATOR: boolean;
    }
    const BreadcrumbSeparator: BreadcrumbSeparatorInterface;
    export default BreadcrumbSeparator;
}

declare module 'antd/node_modules/antd/lib/calendar/locale/en_US' {
    import enUS from 'antd/node_modules/antd/lib/date-picker/locale/en_US';
    export default enUS;
}

declare module 'antd/node_modules/antd/lib/modal/locale' {
    export interface ModalLocale {
        okText: string;
        cancelText: string;
        justOkText: string;
    }
    export function changeConfirmLocale(newLocale?: ModalLocale): void;
    export function getConfirmLocale(): ModalLocale;
}

declare module 'antd/node_modules/antd/lib/form/interface' {
    export { Options as ScrollOptions } from 'scroll-into-view-if-needed';
    export type FormLabelAlign = 'left' | 'right';
    export { Store, StoreValue, NamePath, InternalNamePath } from 'rc-field-form/lib/interface';
}

declare module 'antd/node_modules/antd/lib/form/hooks/useForm' {
    import * as React from 'react';
    import { FormInstance as RcFormInstance } from 'rc-field-form';
    import { ScrollOptions, NamePath, InternalNamePath } from 'antd/node_modules/antd/lib/form/interface';
    export interface FormInstance<Values = any> extends RcFormInstance<Values> {
        scrollToField: (name: NamePath, options?: ScrollOptions) => void;
        /** This is an internal usage. Do not use in your prod */
        __INTERNAL__: {
            /** No! Do not use this in your code! */
            name?: string;
            /** No! Do not use this in your code! */
            itemRef: (name: InternalNamePath) => (node: React.ReactElement) => void;
        };
        getFieldInstance: (name: NamePath) => any;
    }
    export default function useForm<Values = any>(form?: FormInstance<Values>): [FormInstance<Values>];
}

declare module 'antd/node_modules/antd/lib/date-picker/PickerButton' {
    import { ButtonProps } from 'antd/node_modules/antd/lib/button';
    export default function PickerButton(props: ButtonProps): JSX.Element;
}

declare module 'antd/node_modules/antd/lib/date-picker/PickerTag' {
    import { TagProps } from 'antd/node_modules/antd/lib/tag';
    export default function PickerTag(props: TagProps): JSX.Element;
}

declare module 'antd/node_modules/antd/lib/form/FormItemLabel' {
    import * as React from 'react';
    import { ColProps } from 'antd/node_modules/antd/lib/grid/col';
    import { FormLabelAlign } from 'antd/node_modules/antd/lib/form/interface';
    import { RequiredMark } from 'antd/node_modules/antd/lib/form/Form';
    import { TooltipProps } from 'antd/node_modules/antd/lib/tooltip';
    export type WrapperTooltipProps = TooltipProps & {
        icon?: React.ReactElement;
    };
    export type LabelTooltipType = WrapperTooltipProps | React.ReactNode;
    export interface FormItemLabelProps {
        colon?: boolean;
        htmlFor?: string;
        label?: React.ReactNode;
        labelAlign?: FormLabelAlign;
        labelCol?: ColProps;
        requiredMark?: RequiredMark;
        tooltip?: LabelTooltipType;
    }
    const FormItemLabel: React.FC<FormItemLabelProps & {
        required?: boolean;
        prefixCls: string;
    }>;
    export default FormItemLabel;
}

declare module 'antd/node_modules/antd/lib/form/FormItemInput' {
    import * as React from 'react';
    import { ColProps } from 'antd/node_modules/antd/lib/grid/col';
    import { ValidateStatus } from 'antd/node_modules/antd/lib/form/FormItem';
    interface FormItemInputMiscProps {
        prefixCls: string;
        children: React.ReactNode;
        errors: React.ReactNode[];
        hasFeedback?: boolean;
        validateStatus?: ValidateStatus;
        onDomErrorVisibleChange: (visible: boolean) => void;
        /** @private Internal Usage, do not use in any of your production. */
        _internalItemRender?: {
            mark: string;
            render: (props: FormItemInputProps & FormItemInputMiscProps, domList: {
                input: JSX.Element;
                errorList: JSX.Element;
                extra: JSX.Element | null;
            }) => React.ReactNode;
        };
    }
    export interface FormItemInputProps {
        wrapperCol?: ColProps;
        help?: React.ReactNode;
        extra?: React.ReactNode;
        status?: ValidateStatus;
    }
    const FormItemInput: React.FC<FormItemInputProps & FormItemInputMiscProps>;
    export default FormItemInput;
}

declare module 'antd/node_modules/antd/lib/input/ClearableLabeledInput' {
    import * as React from 'react';
    import { InputProps } from 'antd/node_modules/antd/lib/input/Input';
    import { DirectionType } from 'antd/node_modules/antd/lib/config-provider';
    import { SizeType } from 'antd/node_modules/antd/lib/config-provider/SizeContext';
    const ClearableInputType: ["text", "input"];
    export function hasPrefixSuffix(props: InputProps | ClearableInputProps): boolean;
    /** This basic props required for input and textarea. */
    interface BasicProps {
        prefixCls: string;
        inputType: typeof ClearableInputType[number];
        value?: any;
        allowClear?: boolean;
        element: React.ReactElement;
        handleReset: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
        className?: string;
        style?: React.CSSProperties;
        disabled?: boolean;
        direction?: DirectionType;
        focused?: boolean;
        readOnly?: boolean;
        bordered: boolean;
    }
    /** This props only for input. */
    interface ClearableInputProps extends BasicProps {
        size?: SizeType;
        suffix?: React.ReactNode;
        prefix?: React.ReactNode;
        addonBefore?: React.ReactNode;
        addonAfter?: React.ReactNode;
        triggerFocus?: () => void;
    }
    class ClearableLabeledInput extends React.Component<ClearableInputProps> {
        onInputMouseUp: React.MouseEventHandler;
        renderClearIcon(prefixCls: string): JSX.Element | null;
        renderSuffix(prefixCls: string): JSX.Element | null;
        renderLabeledIcon(prefixCls: string, element: React.ReactElement): JSX.Element;
        renderInputWithLabel(prefixCls: string, labeledElement: React.ReactElement): JSX.Element;
        renderTextAreaWithClearIcon(prefixCls: string, element: React.ReactElement): JSX.Element;
        render(): JSX.Element;
    }
    export default ClearableLabeledInput;
}

declare module 'antd/node_modules/antd/lib/list/index' {
    import * as React from 'react';
    import { SpinProps } from 'antd/node_modules/antd/lib/spin';
    import { PaginationConfig } from 'antd/node_modules/antd/lib/pagination';
    export { ListItemProps, ListItemMetaProps } from 'antd/node_modules/antd/lib/list/Item';
    export type ColumnCount = number;
    export type ColumnType = 'gutter' | 'column' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
    export interface ListGridType {
        gutter?: number;
        column?: ColumnCount;
        xs?: ColumnCount;
        sm?: ColumnCount;
        md?: ColumnCount;
        lg?: ColumnCount;
        xl?: ColumnCount;
        xxl?: ColumnCount;
    }
    export type ListSize = 'small' | 'default' | 'large';
    export type ListItemLayout = 'horizontal' | 'vertical';
    export interface ListProps<T> {
        bordered?: boolean;
        className?: string;
        style?: React.CSSProperties;
        children?: React.ReactNode;
        dataSource?: T[];
        extra?: React.ReactNode;
        grid?: ListGridType;
        id?: string;
        itemLayout?: ListItemLayout;
        loading?: boolean | SpinProps;
        loadMore?: React.ReactNode;
        pagination?: PaginationConfig | false;
        prefixCls?: string;
        rowKey?: ((item: T) => string) | string;
        renderItem?: (item: T, index: number) => React.ReactNode;
        size?: ListSize;
        split?: boolean;
        header?: React.ReactNode;
        footer?: React.ReactNode;
        locale?: ListLocale;
    }
    export interface ListLocale {
        emptyText: React.ReactNode | (() => React.ReactNode);
    }
    export interface ListConsumerProps {
        grid?: any;
        itemLayout?: string;
    }
    export const ListContext: React.Context<ListConsumerProps>;
    export const ListConsumer: React.Consumer<ListConsumerProps>;
    function List<T>({ pagination, prefixCls: customizePrefixCls, bordered, split, className, children, itemLayout, loadMore, grid, dataSource, size, header, footer, loading, rowKey, renderItem, locale, ...rest }: ListProps<T>): JSX.Element;
    namespace List {
        var Item: import("./Item").ListItemTypeProps;
    }
    export default List;
}

declare module 'antd/node_modules/antd/lib/modal/useModal' {
    import * as React from 'react';
    import { ModalStaticFunctions } from 'antd/node_modules/antd/lib/modal/confirm';
    export default function useModal(): [Omit<ModalStaticFunctions, 'warn'>, React.ReactElement];
}

declare module 'antd/node_modules/antd/lib/statistic/Countdown' {
    import * as React from 'react';
    import { StatisticProps } from 'antd/node_modules/antd/lib/statistic/Statistic';
    import { countdownValueType, FormatConfig } from 'antd/node_modules/antd/lib/statistic/utils';
    interface CountdownProps extends StatisticProps {
        value?: countdownValueType;
        format?: string;
        onFinish?: () => void;
        onChange?: (value?: countdownValueType) => void;
    }
    class Countdown extends React.Component<CountdownProps, {}> {
        static defaultProps: Partial<CountdownProps>;
        countdownId?: number;
        componentDidMount(): void;
        componentDidUpdate(): void;
        componentWillUnmount(): void;
        syncTimer: () => void;
        startTimer: () => void;
        stopTimer: () => void;
        formatCountdown: (value: countdownValueType, config: FormatConfig) => string;
        valueRender: (node: React.ReactElement<HTMLDivElement>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        render(): JSX.Element;
    }
    export default Countdown;
}

declare module 'antd/node_modules/antd/lib/statistic/utils' {
    import * as React from 'react';
    export type valueType = number | string;
    export type countdownValueType = valueType | string;
    export type Formatter = false | 'number' | 'countdown' | ((value: valueType, config?: FormatConfig) => React.ReactNode);
    export interface FormatConfig {
        formatter?: Formatter;
        decimalSeparator?: string;
        groupSeparator?: string;
        precision?: number;
        prefixCls?: string;
    }
    export interface CountdownFormatConfig extends FormatConfig {
        format?: string;
    }
    export function formatTimeStr(duration: number, format: string): string;
    export function formatCountdown(value: countdownValueType, config: CountdownFormatConfig): string;
}

declare module 'antd/node_modules/antd/lib/skeleton/Title' {
    import * as React from 'react';
    export interface SkeletonTitleProps {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        width?: number | string;
    }
    const Title: ({ prefixCls, className, width, style }: SkeletonTitleProps) => JSX.Element;
    export default Title;
}

declare module 'antd/node_modules/antd/lib/skeleton/Paragraph' {
    import * as React from 'react';
    type widthUnit = number | string;
    export interface SkeletonParagraphProps {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        width?: widthUnit | Array<widthUnit>;
        rows?: number;
    }
    const Paragraph: (props: SkeletonParagraphProps) => JSX.Element;
    export default Paragraph;
}

declare module 'antd/node_modules/antd/lib/skeleton/Avatar' {
    import { SkeletonElementProps } from 'antd/node_modules/antd/lib/skeleton/Element';
    export interface AvatarProps extends Omit<SkeletonElementProps, 'shape'> {
        shape?: 'circle' | 'square';
    }
    const SkeletonAvatar: {
        (props: AvatarProps): JSX.Element;
        defaultProps: {
            size: string;
            shape: string;
        };
    };
    export default SkeletonAvatar;
}

declare module 'antd/node_modules/antd/lib/table/hooks/useSelection' {
    import { TableRowSelection, Key, GetRowKey, TableLocale, SelectionItem, TransformColumns, ExpandType, GetPopupContainer } from 'antd/node_modules/antd/lib/table/interface';
    export const SELECTION_ALL: "SELECT_ALL";
    export const SELECTION_INVERT: "SELECT_INVERT";
    export const SELECTION_NONE: "SELECT_NONE";
    interface UseSelectionConfig<RecordType> {
        prefixCls: string;
        pageData: RecordType[];
        data: RecordType[];
        getRowKey: GetRowKey<RecordType>;
        getRecordByKey: (key: Key) => RecordType;
        expandType: ExpandType;
        childrenColumnName: string;
        expandIconColumnIndex?: number;
        locale: TableLocale;
        getPopupContainer?: GetPopupContainer;
    }
    export type INTERNAL_SELECTION_ITEM = SelectionItem | typeof SELECTION_ALL | typeof SELECTION_INVERT | typeof SELECTION_NONE;
    export default function useSelection<RecordType>(rowSelection: TableRowSelection<RecordType> | undefined, config: UseSelectionConfig<RecordType>): [TransformColumns<RecordType>, Set<Key>];
    export {};
}

declare module 'antd/node_modules/antd/lib/transfer/index' {
    import * as React from 'react';
    import List, { TransferListProps } from 'antd/node_modules/antd/lib/transfer/list';
    import Search from 'antd/node_modules/antd/lib/transfer/search';
    import { RenderEmptyHandler } from 'antd/node_modules/antd/lib/config-provider';
    import { TransferListBodyProps } from 'antd/node_modules/antd/lib/transfer/ListBody';
    import { PaginationType } from 'antd/node_modules/antd/lib/transfer/interface';
    export { TransferListProps } from 'antd/node_modules/antd/lib/transfer/list';
    export { TransferOperationProps } from 'antd/node_modules/antd/lib/transfer/operation';
    export { TransferSearchProps } from 'antd/node_modules/antd/lib/transfer/search';
    export type TransferDirection = 'left' | 'right';
    export interface RenderResultObject {
        label: React.ReactElement;
        value: string;
    }
    export type RenderResult = React.ReactElement | RenderResultObject | string | null;
    export interface TransferItem {
        key?: string;
        title?: string;
        description?: string;
        disabled?: boolean;
        [name: string]: any;
    }
    export type KeyWise<T> = T & {
        key: string;
    };
    export type KeyWiseTransferItem = KeyWise<TransferItem>;
    type TransferRender<RecordType> = (item: RecordType) => RenderResult;
    export interface ListStyle {
        direction: TransferDirection;
    }
    export type SelectAllLabel = React.ReactNode | ((info: {
        selectedCount: number;
        totalCount: number;
    }) => React.ReactNode);
    export interface TransferLocale {
        titles: React.ReactNode[];
        notFoundContent?: React.ReactNode;
        searchPlaceholder: string;
        itemUnit: string;
        itemsUnit: string;
        remove: string;
        selectAll: string;
        selectCurrent: string;
        selectInvert: string;
        removeAll: string;
        removeCurrent: string;
    }
    export interface TransferProps<RecordType> {
        prefixCls?: string;
        className?: string;
        disabled?: boolean;
        dataSource: RecordType[];
        targetKeys?: string[];
        selectedKeys?: string[];
        render?: TransferRender<RecordType>;
        onChange?: (targetKeys: string[], direction: TransferDirection, moveKeys: string[]) => void;
        onSelectChange?: (sourceSelectedKeys: string[], targetSelectedKeys: string[]) => void;
        style?: React.CSSProperties;
        listStyle: ((style: ListStyle) => React.CSSProperties) | React.CSSProperties;
        operationStyle?: React.CSSProperties;
        titles?: React.ReactNode[];
        operations?: string[];
        showSearch?: boolean;
        filterOption?: (inputValue: string, item: RecordType) => boolean;
        locale?: Partial<TransferLocale>;
        footer?: (props: TransferListProps<RecordType>) => React.ReactNode;
        rowKey?: (record: RecordType) => string;
        onSearch?: (direction: TransferDirection, value: string) => void;
        onScroll?: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;
        children?: (props: TransferListBodyProps<RecordType>) => React.ReactNode;
        showSelectAll?: boolean;
        selectAllLabels?: SelectAllLabel[];
        oneWay?: boolean;
        pagination?: PaginationType;
    }
    interface TransferState {
        sourceSelectedKeys: string[];
        targetSelectedKeys: string[];
    }
    class Transfer<RecordType extends TransferItem = TransferItem> extends React.Component<TransferProps<RecordType>, TransferState> {
        static List: typeof List;
        static Operation: ({ disabled, moveToLeft, moveToRight, leftArrowText, rightArrowText, leftActive, rightActive, className, style, direction, oneWay, }: import("./operation").TransferOperationProps) => JSX.Element;
        static Search: typeof Search;
        static defaultProps: {
            dataSource: never[];
            locale: {};
            showSearch: boolean;
            listStyle: () => void;
        };
        static getDerivedStateFromProps<T>({ selectedKeys, targetKeys, pagination, children, }: TransferProps<T>): {
            sourceSelectedKeys: string[];
            targetSelectedKeys: string[];
        } | null;
        separatedDataSource: {
            leftDataSource: RecordType[];
            rightDataSource: RecordType[];
        } | null;
        constructor(props: TransferProps<RecordType>);
        setStateKeys: (direction: TransferDirection, keys: string[] | ((prevKeys: string[]) => string[])) => void;
        getTitles(transferLocale: TransferLocale): React.ReactNode[];
        getLocale: (transferLocale: TransferLocale, renderEmpty: RenderEmptyHandler) => {
            titles: React.ReactNode[];
            notFoundContent: string | number | boolean | {} | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactNodeArray | React.ReactPortal | null | undefined;
            searchPlaceholder: string;
            itemUnit: string;
            itemsUnit: string;
            remove: string;
            selectAll: string;
            selectCurrent: string;
            selectInvert: string;
            removeAll: string;
            removeCurrent: string;
        };
        moveTo: (direction: TransferDirection) => void;
        moveToLeft: () => void;
        moveToRight: () => void;
        onItemSelectAll: (direction: TransferDirection, selectedKeys: string[], checkAll: boolean) => void;
        onLeftItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;
        onRightItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;
        handleFilter: (direction: TransferDirection, e: React.ChangeEvent<HTMLInputElement>) => void;
        handleLeftFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;
        handleRightFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;
        handleClear: (direction: TransferDirection) => void;
        handleLeftClear: () => void;
        handleRightClear: () => void;
        onItemSelect: (direction: TransferDirection, selectedKey: string, checked: boolean) => void;
        onLeftItemSelect: (selectedKey: string, checked: boolean) => void;
        onRightItemSelect: (selectedKey: string, checked: boolean) => void;
        onRightItemRemove: (selectedKeys: string[]) => void;
        handleScroll: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;
        handleLeftScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;
        handleRightScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;
        handleSelectChange(direction: TransferDirection, holder: string[]): void;
        handleListStyle: (listStyle: React.CSSProperties | ((style: ListStyle) => React.CSSProperties), direction: TransferDirection) => React.CSSProperties;
        separateDataSource(): {
            leftDataSource: KeyWise<RecordType>[];
            rightDataSource: KeyWise<RecordType>[];
        };
        renderTransfer: (transferLocale: TransferLocale) => JSX.Element;
        render(): JSX.Element;
    }
    export default Transfer;
}

declare module 'antd/node_modules/antd/lib/typography/Base' {
    import * as React from 'react';
    import { AutoSizeType } from 'rc-textarea/lib/ResizableTextArea';
    import { ConfigConsumerProps } from 'antd/node_modules/antd/lib/config-provider';
    import { TypographyProps } from 'antd/node_modules/antd/lib/typography/Typography';
    export type BaseType = 'secondary' | 'success' | 'warning' | 'danger';
    interface CopyConfig {
        text?: string;
        onCopy?: () => void;
        icon?: React.ReactNode;
        tooltips?: boolean | React.ReactNode;
    }
    interface EditConfig {
        editing?: boolean;
        icon?: React.ReactNode;
        tooltip?: boolean | React.ReactNode;
        onStart?: () => void;
        onChange?: (value: string) => void;
        onCancel?: () => void;
        onEnd?: () => void;
        maxLength?: number;
        autoSize?: boolean | AutoSizeType;
    }
    export interface EllipsisConfig {
        rows?: number;
        expandable?: boolean;
        suffix?: string;
        symbol?: React.ReactNode;
        onExpand?: React.MouseEventHandler<HTMLElement>;
        onEllipsis?: (ellipsis: boolean) => void;
        tooltip?: React.ReactNode;
    }
    export interface BlockProps extends TypographyProps {
        title?: string;
        editable?: boolean | EditConfig;
        copyable?: boolean | CopyConfig;
        type?: BaseType;
        disabled?: boolean;
        ellipsis?: boolean | EllipsisConfig;
        code?: boolean;
        mark?: boolean;
        underline?: boolean;
        delete?: boolean;
        strong?: boolean;
        keyboard?: boolean;
        italic?: boolean;
    }
    interface InternalBlockProps extends BlockProps {
        component: string;
    }
    interface BaseState {
        edit: boolean;
        copied: boolean;
        ellipsisText: string;
        ellipsisContent: React.ReactNode;
        isEllipsis: boolean;
        expanded: boolean;
        clientRendered: boolean;
    }
    class Base extends React.Component<InternalBlockProps, BaseState> {
        static contextType: React.Context<ConfigConsumerProps>;
        static defaultProps: {
            children: string;
        };
        static getDerivedStateFromProps(nextProps: BlockProps): {};
        context: ConfigConsumerProps;
        editIcon?: HTMLDivElement;
        contentRef: React.RefObject<HTMLElement>;
        copyId?: number;
        rafId?: number;
        expandStr?: string;
        copyStr?: string;
        copiedStr?: string;
        editStr?: string;
        state: BaseState;
        componentDidMount(): void;
        componentDidUpdate(prevProps: BlockProps): void;
        componentWillUnmount(): void;
        getPrefixCls: () => string;
        onExpandClick: React.MouseEventHandler<HTMLElement>;
        onEditClick: (e: React.MouseEvent<HTMLDivElement>) => void;
        onEditChange: (value: string) => void;
        onEditCancel: () => void;
        onCopyClick: (e: React.MouseEvent<HTMLDivElement>) => void;
        getEditable(props?: BlockProps): EditConfig;
        getEllipsis(props?: BlockProps): EllipsisConfig;
        setEditRef: (node: HTMLDivElement) => void;
        triggerEdit: (edit: boolean) => void;
        resizeOnNextFrame: () => void;
        canUseCSSEllipsis(): boolean;
        syncEllipsis(): void;
        renderExpand(forceRender?: boolean): JSX.Element | null;
        renderEdit(): JSX.Element | undefined;
        renderCopy(): JSX.Element | undefined;
        renderEditInput(): JSX.Element;
        renderOperations(forceRenderExpanded?: boolean): (JSX.Element | null | undefined)[];
        renderContent(): JSX.Element;
        render(): JSX.Element;
    }
    export default Base;
}

declare module 'antd/node_modules/antd/lib/date-picker/locale/en_US' {
    import { PickerLocale } from 'antd/node_modules/antd/lib/date-picker/generatePicker';
    const locale: PickerLocale;
    export default locale;
}

declare module 'antd/node_modules/antd/lib/skeleton/Element' {
    import * as React from 'react';
    export interface SkeletonElementProps {
        prefixCls?: string;
        className?: string;
        style?: React.CSSProperties;
        size?: 'large' | 'small' | 'default' | number;
        shape?: 'circle' | 'square' | 'round';
        active?: boolean;
    }
    const Element: (props: SkeletonElementProps) => JSX.Element;
    export default Element;
}

